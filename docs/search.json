[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "Sandro has worked in the financial services and energy industries ever since 2013. He has honed his skills in data mining and wrangling, revenue modelling, portfolio management, financial risk analysis, risk and compliance assessments, market study and research, and budgetting and planning. \nThis website is where I’ll be sharing my journey of mastering the art and science of data science and analytics, sharing my past projects, and posting about the topics that really get me going. So, stay tuned and let’s explore this exciting world together!\n\n\nEducation\n M.Sc., Data Science \n\nAsian Insitute of Management – Manila, Philippines\n\n\n2019 - 2020\n\n B.A., Double Major in Economics and Mathematics \n\nCollege of the Holy Cross – Massachusetts, USA\n\n\n2009 - 2013\n\n\n\nExperience\n Analytis and Optimization Manager \n\nAboitiz Power Corporation\n\n Data Analytics and Digital Solutions Manager \n\nTeaM Energy Corporation\n\n Financial Risk Consultant \n\nAIA Philippines\n\n Innovations Programs Manager \n\nAboitiz Power Corporation\n\n Private Consulting Data Scientist \n\nEpimetrics, Inc. with National Resilience Council and Coastal Cities at Risk\n\n Private Consulting Data Scientist \n\nEpimetrics, Inc. with Philippine Council for Health Research and Development\n\n Private Consultant for Mathematical Modelling \n\nPhilippine Institute for Development Studies (PIDS)\n\n Margin Optimization Specialist \n\nAboitiz Power Corporation\n\n Market Analyst\n\nAboitiz Power Corporation"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections\n\n\n\npython\n\n\neda\n\n\ngeospatial\n\n\n\nLooks like voting in the Philippines is all about location, location, location! Literacy and religion may not be factors, but hometown pride definitely is.\n\n\n\n\n\n\nApr 17, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "",
    "text": "This notebook was created for our Data Mining and Wrangling class in AIM MSDS. In particular, this was done during our 2nd semester of class, as one of the required lab reports. In this notebook, we explored the 2019 elections to see if there are any socio-economic relationships with the results. We analyzed the election results per region and wanted to answer the following questions: (1) Is Demographics Related To Voting Preference?, (2) Is literacy rate related to voting preference?, and (3) Is religion related to voting preference?\n\n\n\n\n\n\n\n\n\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-AMS_HTML\"&gt;&lt;/script&gt;\n&lt;!-- MathJax configuration --&gt;\n&lt;script type=\"text/x-mathjax-config\"&gt;\nMathJax.Hub.Config({\n    tex2jax: {\n        inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n        displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ],\n        processEscapes: true,\n        processEnvironments: true\n    },\n    // Center justify equations in code and markdown cells. Elsewhere\n    // we use CSS to left justify single line equations in code cells.\n    displayAlign: 'center',\n    \"HTML-CSS\": {\n        styles: {'.MathJax_Display': {\"margin\": 0}},\n        linebreaks: { automatic: true }\n    }\n});\n&lt;/script&gt;\n&lt;!-- End of mathjax configuration --&gt;&lt;/head&gt;\n\n\n&lt;div class=\"container\" id=\"notebook-container\"&gt;\n\n\n\n\n\n\n\n Regional Voting Preferences in the 2019 Philippine Senatorial Elections\n\n\n\n\n\n\n\n\n\n\n\nThe Philippines recently concluded its 2019 midterm elections last May 13. Sixty-two (62) candidates from various political parties contested for twelve (12) seats in the Senate of The Philippines. Given the unexpected results, the team was wondering on the following topics:\n\n\n\nHow did the various administrative regions of the Philippines voted for their senators?\n\n\nIs the voter preference homogeneous across the country, or is there a preferred candidate or party per region? More specifically, how does (1) religious affiliation, (2) educational attainment, and (2) sex play a major role on how the voters select their candidates.\n\n\n\n\n\n\n\n\nIn [1]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfrom IPython.display import HTML\n\nHTML('''&lt;script&gt;\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n&lt;/script&gt;\n&lt;form action=\"javascript:code_toggle()\"&gt;&lt;input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"&gt;&lt;/form&gt;''')\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[1]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore anything else, let us first load all important modules for this exercise.\n\n\n\n\n\n\n\nIn [2]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nimport os\nimport io\nimport re\nimport time\nimport glob\nimport requests\nimport urllib.request\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport seaborn as sns\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nIt is important to identify the datasets we are going to use for this exercise. The two identified datasets the group intends to use are: the 2019 National Data and the 2015-2016 Census data.\n\n\nWith regards to 2019 National data, the team used a web scapper provided Prof. Alis. The web scapper downloaded the election results from the Commission of Elections’ 2019 National and Local Elections website. The results were then stored in a local repository which is then easily accesible for the team. The 2019 elections results are broken down into two main directories: results and contest. In this exercise, the team will explore both directories to map out a comprehensive summary of the 2019 senatorial and party elections.\n\n\nSecondly, the 2015-2016 Census data has already been stored in a local repository for easier access. One of the main reasons why the team decided to use the 2015-2016 Census data is because of the lack of availability of recent data. The Philippine Statistics Authority only releases a comprehensive census survey ever six years. However for the purpose of this exercise, the team has agreed that the 2015-2016 census data can act as an appproximate for today’s population.\n\n\n\n\n\n\n\n\n\n\n\n A. Methodology\n\n\n\n\n\n\n\n\n\n\n\n Step 1: Extract and collect the 2019 Elections (Results) data\n\n\n\n\n\n\n\n\n\n\n\nThe first directory to explore is the 2019 Election results. The results directory contains all electoral results from a regional level down to the barangay level. For each level, a specific coc.json file is stored. This file contains all electoral results data and metadata for both national and local elections. However for the purposes of this analysis, we will only look at the aggregated elections data at the regional level. The files that we are interested are the coc.json files associated to each province, as these files contain the metadata and data on the election results.\n\n\n\n\n\n\n\n\n\n\n\nThe main structure of each coc.json file contains the following main keys: vbc, rs, sts, obs, and cos. For the purpose of this exercise, the important key the group needs to extract is the rs key as this provides the each candidate’s total votes per area. Under the rs key, the following keys can be found: cc, bo, v, tot, per, and ser. Cross referencing these keys with official statements and comelec documentations suggests that important keys are as follows: cc pertaining to contest_type, bo pertaining to the candidate_id, and v pertaining to votes_per_province.\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\ncc\n\n\nContest code\n\n\n\n\nbo\n\n\nContestant id\n\n\n\n\nv\n\n\nTotal votes per contestant\n\n\n\n\ntot\n\n\nTotal votes per province\n\n\n\n\n\n\nHowever, it must be pointed out that the available data only goes as high as provincial data. If we want to process the provincial level, the team will have to aggregate the data up.\n\n\n\n\n\n\n\n\n\n\n\nThe group created utility functions for easier retrieval of the provincial elections datasets. The purpose for the utility functions (and future utility functions) are for initial cleaning and manipulations. This is to ensure each dataset is ready for aggregation.\n\n\nThe get_province_coc method unpacks each key and value from the coc.json dictionary into a cleaned up dataframe. In addition, the method identifies which region and province the file originated from by examining the filepath that was passed.\n\n\nThe get_all_province_coc method is a walker that goes through each of the results directory. The walker checks if the filename has an equal value to coc.json. If a coc.json was located, the get_province_coc method is applied with the filepath as the parameter. The resulting dataframe is then appended to a master dataframe for further extraction and analysis. For this exercise, the group only had to extract data up to the regional and provincial levels so only three wildcard were use for the glob walker.\n\n\nSpecial methods (get_ncr_coc and get_all_ncr_coc) were established to get the cities’ coc.json. For the case of the NCR cities, theire associated coc.json files were one directory lower.\n\n\n\n\n\n\n\nIn [3]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndef get_province_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-2]\n        province = dirpath.split('/')[-1]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_province_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Created a new column to deal with the reclassification of\n        \"NEGROS ORIENTAL\" and \"NEGROS OCCIDENTAL\" to \"NIR\" \n            to match the PSA 2016 dataset.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if os.path.basename(file) == 'coc.json':\n            df = get_province_coc(file)\n            total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    total.loc[(total['province'] == \"NEGROS ORIENTAL\") |\n              (total['province'] == \"NEGROS OCCIDENTAL\"), 'region'] = 'NIR'\n    return total\n\n\n&lt;/div&gt;\n\n\n\n\n\n\nIn [4]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndef get_ncr_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe    \n\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-3]\n        province = dirpath.split('/')[-2]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_ncr_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if file.split('/')[7] == 'NCR':\n            if os.path.basename(file) == 'coc.json':\n                df = get_ncr_coc(file)\n                total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    return total\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nWith these utility functions inplace, the team can now apply these methods for easier access to the 2019 elections data.¶\n\n\nWe can now compile all of the election results with the following line:\n\n\n\n\n\n\n\nIn [5]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ntree = '/mnt/data/public/elections/nle2019/results/*/*/*'\nncr_tree = '/mnt/data/public/elections/nle2019/results/*/*/*/*'\ndf_results = get_all_province_coc(tree)\ndf_results = df_results.append(get_all_ncr_coc(ncr_tree))\ndf_results.drop_duplicates(inplace=True)\n\n\n&lt;/div&gt;\n\n\n\n\n\n\nIn [6]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_results.head(5)\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[6]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nvbc\n\n\ncc\n\n\nbo\n\n\nv\n\n\ntot\n\n\nper\n\n\nser\n\n\nregion_raw\n\n\nprovince\n\n\nregion\n\n\n\n\n\n\n0\n\n\n89550\n\n\n1.0\n\n\n1.0\n\n\n2004.0\n\n\n1708769.0\n\n\n0.11\n\n\n2800.0\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\nREGION I\n\n\n\n\n1\n\n\n89550\n\n\n1.0\n\n\n2.0\n\n\n1607.0\n\n\n1708769.0\n\n\n0.09\n\n\n2800.0\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\nREGION I\n\n\n\n\n2\n\n\n89550\n\n\n1.0\n\n\n3.0\n\n\n8772.0\n\n\n1708769.0\n\n\n0.51\n\n\n2800.0\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\nREGION I\n\n\n\n\n3\n\n\n89550\n\n\n1.0\n\n\n4.0\n\n\n1767.0\n\n\n1708769.0\n\n\n0.10\n\n\n2800.0\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\nREGION I\n\n\n\n\n4\n\n\n89550\n\n\n1.0\n\n\n5.0\n\n\n5068.0\n\n\n1708769.0\n\n\n0.29\n\n\n2800.0\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\nREGION I\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, let us examine the obtained dataset with actual election results.¶\n\n\nBy cross checking the results with Comelec data, we can identify the senators and party names.\n\n\n\n\n\n\n\n\n\n\n\nJust to check our data, we can look at an example senator from the dataset. By choosing cc=1 and bo=46, we are actually highlighting Imee Marcos’ senatorial candidacy results.\n\n\n\n\n\n\n\nIn [7]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_marcos = df_results.query('cc == 1 & bo == 46').copy()\ndf_marcos.groupby('region').sum()['v'].sort_values(\n    ascending=True).plot.barh(figsize=(10, 10),\n                              title='Contestant: 46 - Imee Marcos',\n                              color='#BF5209', ax=ax);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally, let us check some descriptive statistics for the 2019 Elections dataset. More specifically, let us examine the v or votes column. The group will be highly dependent on the votes data so let us first do some initial statistics and visualizations.\n\n\n\n\n\n\n\nIn [8]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_test = df_results.groupby(['region', 'province'])['v'].sum().to_frame()\ndf_test = df_test.rename(columns={'v': 'votes'})\ndf_test\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[8]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\nvotes\n\n\n\n\nregion\n\n\nprovince\n\n\n\n\n\n\n\n\nBARMM\n\n\nBASILAN\n\n\n2093067.0\n\n\n\n\nLANAO DEL SUR\n\n\n4770462.0\n\n\n\n\nMAGUINDANAO\n\n\n5917983.0\n\n\n\n\nSULU\n\n\n3529555.0\n\n\n\n\nTAWI-TAWI\n\n\n1874486.0\n\n\n\n\nCAR\n\n\nABRA\n\n\n1923481.0\n\n\n\n\nAPAYAO\n\n\n703002.0\n\n\n\n\nBENGUET\n\n\n2426397.0\n\n\n\n\nIFUGAO\n\n\n1408688.0\n\n\n\n\nKALINGA\n\n\n1621414.0\n\n\n\n\nMOUNTAIN PROVINCE\n\n\n1074249.0\n\n\n\n\nNCR\n\n\nNATIONAL CAPITAL REGION - FOURTH DISTRICT\n\n\n22896771.0\n\n\n\n\nNATIONAL CAPITAL REGION - MANILA\n\n\n13461229.0\n\n\n\n\nNATIONAL CAPITAL REGION - SECOND DISTRICT\n\n\n29803007.0\n\n\n\n\nNATIONAL CAPITAL REGION - THIRD DISTRICT\n\n\n18481014.0\n\n\n\n\nTAGUIG - PATEROS\n\n\n10018306.0\n\n\n\n\nNIR\n\n\nNEGROS OCCIDENTAL\n\n\n12453486.0\n\n\n\n\nNEGROS ORIENTAL\n\n\n6900077.0\n\n\n\n\nREGION I\n\n\nILOCOS NORTE\n\n\n3614806.0\n\n\n\n\nILOCOS SUR\n\n\n4882048.0\n\n\n\n\nLA UNION\n\n\n5764844.0\n\n\n\n\nPANGASINAN\n\n\n19803192.0\n\n\n\n\nREGION II\n\n\nBATANES\n\n\n118412.0\n\n\n\n\nCAGAYAN\n\n\n6890994.0\n\n\n\n\nISABELA\n\n\n9632919.0\n\n\n\n\nNUEVA VIZCAYA\n\n\n3200395.0\n\n\n\n\nQUIRINO\n\n\n1198929.0\n\n\n\n\nREGION III\n\n\nAURORA\n\n\n1493909.0\n\n\n\n\nBATAAN\n\n\n6433641.0\n\n\n\n\nBULACAN\n\n\n19567555.0\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\nREGION VI\n\n\nGUIMARAS\n\n\n1217864.0\n\n\n\n\nILOILO\n\n\n11118379.0\n\n\n\n\nREGION VII\n\n\nBOHOL\n\n\n8977777.0\n\n\n\n\nCEBU\n\n\n19919139.0\n\n\n\n\nSIQUIJOR\n\n\n694813.0\n\n\n\n\nREGION VIII\n\n\nBILIRAN\n\n\n1051266.0\n\n\n\n\nEASTERN SAMAR\n\n\n3370187.0\n\n\n\n\nLEYTE\n\n\n9366390.0\n\n\n\n\nNORTHERN SAMAR\n\n\n3733282.0\n\n\n\n\nSAMAR (WESTERN SAMAR)\n\n\n5954800.0\n\n\n\n\nSOUTHERN LEYTE\n\n\n2558108.0\n\n\n\n\nREGION X\n\n\nBUKIDNON\n\n\n7415656.0\n\n\n\n\nCAMIGUIN\n\n\n768370.0\n\n\n\n\nLANAO DEL NORTE\n\n\n3584638.0\n\n\n\n\nMISAMIS OCCIDENTAL\n\n\n4391884.0\n\n\n\n\nMISAMIS ORIENTAL\n\n\n6488743.0\n\n\n\n\nREGION XI\n\n\nCOMPOSTELA VALLEY\n\n\n4281424.0\n\n\n\n\nDAVAO (DAVAO DEL NORTE)\n\n\n7056455.0\n\n\n\n\nDAVAO DEL SUR\n\n\n4457484.0\n\n\n\n\nDAVAO OCCIDENTAL\n\n\n1378314.0\n\n\n\n\nDAVAO ORIENTAL\n\n\n3200605.0\n\n\n\n\nREGION XII\n\n\nCOTABATO (NORTH COT.)\n\n\n7659458.0\n\n\n\n\nSARANGANI\n\n\n2990485.0\n\n\n\n\nSOUTH COTABATO\n\n\n9090438.0\n\n\n\n\nSULTAN KUDARAT\n\n\n4037874.0\n\n\n\n\nREGION XIII\n\n\nAGUSAN DEL NORTE\n\n\n4670054.0\n\n\n\n\nAGUSAN DEL SUR\n\n\n4155305.0\n\n\n\n\nDINAGAT ISLANDS\n\n\n735236.0\n\n\n\n\nSURIGAO DEL NORTE\n\n\n3979284.0\n\n\n\n\nSURIGAO DEL SUR\n\n\n4116338.0\n\n\n\n\n\n\n86 rows × 1 columns\n\n\n\n\n\n\n\n\n\n\nIn [9]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION III',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nIn [10]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['NCR',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nIn [11]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION IV-A',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nIn [12]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION VII',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo match the contestant ID to the contestant name, the contest files were also downloaded from the Commission of Elections’ 2019 National and Local Elections website and stored in the local repository. Similar to the results directory, the contest directory contained json files for each contest type/position. Upon inspection of a sample file within the directory, the following values were obtained:\n\n\nThe pertinent keys from each json files were:\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\ncc\n\n\nContest code\n\n\n\n\ncn\n\n\nContest code name - location\n\n\n\n\nccc\n\n\nContest code name\n\n\n\n\ntype\n\n\nContest type\n\n\n\n\nbos\n\n\nlist of candidate parameters\n\n\n\n\n\n\nUnder the bos key, we can extract each of the candidates’ parameters. The more useful ones for the group’s study include:\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\nboc\n\n\nContestant ID\n\n\n\n\nbon\n\n\nContestant Name\n\n\n\n\npn\n\n\nParty Name\n\n\n\n\n\n\n&lt;/font&gt;\n\n\n\n\n\n\n\n\n\n\n\n Step 2: Extract and collect the 2019 Elections (Contestant) data\n\n\n\n\n\n\n\n\n\n\n\nThe group also created utility functions for easier retrieval of the contestant datasets. This is to ensure each dataset is ready for aggregation.\n\n\nSimilar to the get_province_coc, the get_contestant_attrib method unpacks each key and value from the {contest_number}.json dictionary into a cleaned up dataframe. The method converts the bos directory into an additional list, which will also be appended into the resulting dataframe.\n\n\nThere are two (2) major political coalitions fighting for the senate seats:&lt;/font&gt;\n\n\n\nHugpong ng Pagbabago (HNP)\n\n\nOtso Diretso\n\n\n\nSimilar to the get_all_province_coc, the get_contestants_attrib method is a walker that goes through each of the contest directory. The method will first append all {contest_numer}.json files into a singular dataframe. Next, the method creates a new column that identifies who among the senatorial candidates are part of the Hugpong ng Pagbabago (HNP) or Otso Diretso campaign.\n\n\n\n\n\n\n\nIn [13]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndef get_contestant_attrib(filepath):\n    \"\"\"\n    Returns the contestant json file into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestnat attributes\n\n    \"\"\"\n\n    contestants_values = []\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n        attrib_keys = [key for key in list(data.keys())\n                       if isinstance(key, (str, float, int))]\n        attrib_values = [value for value in list(data.values())\n                         if isinstance(value, (str, float, int))]\n        contest_values = [list(contest.values()) for contest in data['bos']]\n        df = pd.DataFrame(contest_values,\n                          columns=list(data['bos'][0].keys()))\n        for k, v in zip(attrib_keys, attrib_values):\n            df[k] = v\n    return df\n\n\ndef get_contestants_attrib(filepath):\n    \"\"\"\n    Returns ALL contestant json files into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n    df = pd.DataFrame()\n    for each_filepath in glob.glob(filepath):\n        df = df.append(get_contestant_attrib(each_filepath))\n    senators = df[df.cc == 1].copy()\n    senators['bon'] = senators['bon'].str.extract(pat='(.*?) \\(')\n    party = df[df.cc == 5567].copy()\n    df = senators.append(party)\n    df.drop_duplicates(inplace=True)\n    df.rename(columns={'boc': 'bo'}, inplace=True)\n    otso = ['AQUINO, BENIGNO BAM ', 'DIOKNO, CHEL', 'HILBAY, PILO',\n            'MACALINTAL, MACAROMY', 'GUTOC, SAMIRA', 'ALEJANO, GARY',\n            'ROXAS, MAR', 'TAÑADA,LORENZO ERIN TAPAT']\n    hnp = ['ANGARA, EDGARDO SONNY', 'BONG REVILLA, RAMON JR', 'CAYETANO, PIA',\n           'DELA ROSA, BATO', 'EJERCITO, ESTRADA JV', 'ESTRADA, JINGGOY',\n           'GO, BONG GO', 'MANGUDADATU, DONG', 'MANICAD, JIGGY',\n           'MARCOS, IMEE', 'PIMENTEL, KOKO', 'TOLENTINO, FRANCIS', \n           'VILLAR, CYNTHIA']\n    for o in otso:\n        df.loc[df.bon == o, 'coalition'] = \"Otso Diretso\"\n    for h in hnp:\n        df.loc[df.bon == h, 'coalition'] = \"HNP\"\n    df['coalition'] = df['coalition'].fillna('None')\n    return df\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nLet us run the get_contestants_attrib. This will be used later in the blog for our further analysis.\n\n\n\n\n\n\n\nIn [15]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ncontestant_filepaths = '/mnt/data/public/elections/nle2019/contests/*'\ndf_contestants = get_contestants_attrib(contestant_filepaths)\ndf_contestants.head()\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[15]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nbo\n\n\nbon\n\n\nboi\n\n\nto\n\n\npc\n\n\npn\n\n\npcc\n\n\npcy\n\n\npcm\n\n\npck\n\n\ncc\n\n\ncn\n\n\nccc\n\n\nccn\n\n\npre\n\n\ntype\n\n\ncoalition\n\n\n\n\n\n\n0\n\n\n37\n\n\nHILBAY, PILO\n\n\n52.png\n\n\n37\n\n\n2\n\n\nAKSYON DEMOKRATIKO\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\nSENATOR PHILIPPINES\n\n\n1\n\n\nSENATOR\n\n\n3\n\n\nnational\n\n\nOtso Diretso\n\n\n\n\n1\n\n\n7\n\n\nALUNAN, RAFFY\n\n\n53.png\n\n\n7\n\n\n3\n\n\nBAGUMBAYAN VOLUNTEERS FOR A NEW PHILIPPINES\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\nSENATOR PHILIPPINES\n\n\n1\n\n\nSENATOR\n\n\n3\n\n\nnational\n\n\nNone\n\n\n\n\n2\n\n\n14\n\n\nBALDEVARONA, BALDE\n\n\n35.png\n\n\n14\n\n\n7\n\n\nFILIPINO FAMILY PARTY\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\nSENATOR PHILIPPINES\n\n\n1\n\n\nSENATOR\n\n\n3\n\n\nnational\n\n\nNone\n\n\n\n\n3\n\n\n18\n\n\nCASIÑO, TOTI\n\n\n20.png\n\n\n18\n\n\n8\n\n\nKATIPUNAN NG DEMOKRATIKONG PILIPINO(KDP)\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\nSENATOR PHILIPPINES\n\n\n1\n\n\nSENATOR\n\n\n3\n\n\nnational\n\n\nNone\n\n\n\n\n4\n\n\n21\n\n\nCHONG, GLENN\n\n\n61.png\n\n\n21\n\n\n8\n\n\nKATIPUNAN NG DEMOKRATIKONG PILIPINO(KDP)\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\nSENATOR PHILIPPINES\n\n\n1\n\n\nSENATOR\n\n\n3\n\n\nnational\n\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe now have two dataframes: df_results containing the 2019 election results, and df_contestants containing the contestant information. These two dataframes can now be merged into a single dataframe. Let us also drop certain columns which we have deemed as unimportant.\n\n\n\n\n\n\n\nIn [16]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndef merge_comelec(results, contestants):\n    \"\"\"\n    Merge results dataframe with contestants dataframe\n\n    Parameters\n    ----------\n    results    : pd.DataFrame\n    contestants: pd.DataFrame\n\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n\n    df = pd.merge(results, contestants, on=['bo', 'cc'], how='left')\n    df = df.drop(['vbc', 'boi', 'to', 'pc', 'pcc', 'pcy', 'pcm',\n                  'pck', 'ccc', 'pre', 'ser', 'cn'], axis=1)\n    df.columns = ['position', 'candidate_id', 'votes_per_province',\n                  'total_votes', 'votes_in_pct', 'region_raw', 'province',\n                  'region', 'candidate_name', 'party_name',\n                  'contest_position', 'contest_type', 'coalition']\n    return df\n\n\n&lt;/div&gt;\n\n\n\n\n\n\nIn [17]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nnle2019 = merge_comelec(df_results, df_contestants)\nnle2019.region.unique()\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[17]:&lt;/div&gt;\n\narray(['REGION I', 'REGION IV-B', 'BARMM', 'REGION II', 'REGION III',\n       'REGION V', 'REGION VI', 'NIR', 'REGION VII', 'REGION VIII',\n       'REGION IX', 'REGION X', 'REGION XI', 'REGION XII', 'REGION XIII',\n       'REGION IV-A', 'CAR', 'NCR'], dtype=object)\n\n\n\n\n\n\n\n\n\n\n\n\n Step 3: Load Geopandas for geospatial processing ¶\n\n\nThe Philippines is composed of seventeen (17) administrative regions. We can use the geopandas module to manage and pre-process geospatial data.\n\n\nLet us first load up a geopandas graph of the Philippines.\n\n\n\n\n\n\n\nIn [18]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots(1, figsize=(10, 15), frameon=True)\n\nph0 = gpd.GeoDataFrame.from_file(\"ph_regions.shp\")\nph0.plot(ax=ax, cmap='Greens', edgecolor='#555555', k=18)\nax.set_title('Regions of the Philippines')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nfor ind, row in ph0.iterrows():\n    ax.text(row[\"geometry\"].centroid.x, row[\"geometry\"].centroid.y,\n            row[\"region\"])\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n B. National Senatorial Results¶\n\n\n\n\n\n\n\n\n\n\n\nLet us look at the senatorial candidates. Let us total up the votes by candidate and see the top 12 winners.¶\n\n\n\n\n\n\n\nIn [19]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_senators = nle2019[nle2019['contest_position'] == 'SENATOR']\ndf_senator = df_senators.groupby(['candidate_name']).agg(\n    {'votes_per_province': sum}).reset_index()\ndf_senator.sort_values('votes_per_province', ascending=False, inplace=True)\ndf_senator.columns = ['Candidate', 'Votes']\ndf_senator.head(12)\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[19]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nCandidate\n\n\nVotes\n\n\n\n\n\n\n61\n\n\nVILLAR, CYNTHIA\n\n\n23653546.0\n\n\n\n\n54\n\n\nPOE, GRACE\n\n\n20877585.0\n\n\n\n\n33\n\n\nGO, BONG GO\n\n\n18979132.0\n\n\n\n\n18\n\n\nCAYETANO, PIA\n\n\n18287782.0\n\n\n\n\n23\n\n\nDELA ROSA, BATO\n\n\n17396249.0\n\n\n\n\n7\n\n\nANGARA, EDGARDO SONNY\n\n\n16826634.0\n\n\n\n\n39\n\n\nLAPID, LITO\n\n\n16181906.0\n\n\n\n\n45\n\n\nMARCOS, IMEE\n\n\n14735294.0\n\n\n\n\n59\n\n\nTOLENTINO, FRANCIS\n\n\n14264142.0\n\n\n\n\n15\n\n\nBONG REVILLA, RAMON JR\n\n\n13899831.0\n\n\n\n\n14\n\n\nBINAY, NANCY\n\n\n13864931.0\n\n\n\n\n53\n\n\nPIMENTEL, KOKO\n\n\n13529531.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn [20]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots(figsize=(15,8))\nplt.rcParams.update({'font.size': 14})\ndf_senator.set_index('Candidate').head(12).sort_values(\n    by='Votes', ascending=True).plot.barh(ax=ax,\n    title='Top 12 Candidates, in Millions', color='#BF5209', legend=False);\nax.set_xlabel('Total Votes');\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n C. Top Senator Per Region\n\n\nWe want to find out won across all the regions. If there is any bias for cetain candidates. Based on our findings, we can see that candidate Cynthia Villar won majority of the regions.\n\n\nIt is interesting to note that the top ranking senator for Ilocos Region (Region I) and the Cordillera Administrative Region (CAR) is Imee Marcos, which hails from that region. This confirms that there is a “Solid North”, and that support for the Marcoses still exists in that area.\n\n\nFor the Mindanao regions, the top candidate is Bong Go, former special assistant to President Duterte, who is from Mindanao.\n\n\nThese show that Philippine politics is very regional in nature. Voters will naturally support their hometown candidate, regardless of the issues surrounding that candidate.\n\n\n\n\n\n\n\nIn [21]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_senator_region = df_senators.groupby(\n    ['region', 'candidate_name']).agg({'votes_per_province': sum})\ndf_senator_region['rank'] = df_senator_region.groupby(\n    'region')['votes_per_province'].rank('dense', ascending=False)\ndf_senator_region = df_senator_region[df_senator_region['rank'] == 1].reset_index()\ndf_senator_region.columns = ['Region', 'Candidate Name', 'Votes', 'Rank']\ndf_senator_region\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[21]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nRegion\n\n\nCandidate Name\n\n\nVotes\n\n\nRank\n\n\n\n\n\n\n0\n\n\nBARMM\n\n\nGO, BONG GO\n\n\n768037.0\n\n\n1.0\n\n\n\n\n1\n\n\nCAR\n\n\nMARCOS, IMEE\n\n\n348303.0\n\n\n1.0\n\n\n\n\n2\n\n\nNCR\n\n\nVILLAR, CYNTHIA\n\n\n3345089.0\n\n\n1.0\n\n\n\n\n3\n\n\nNIR\n\n\nVILLAR, CYNTHIA\n\n\n856992.0\n\n\n1.0\n\n\n\n\n4\n\n\nREGION I\n\n\nMARCOS, IMEE\n\n\n1661318.0\n\n\n1.0\n\n\n\n\n5\n\n\nREGION II\n\n\nVILLAR, CYNTHIA\n\n\n915393.0\n\n\n1.0\n\n\n\n\n6\n\n\nREGION III\n\n\nVILLAR, CYNTHIA\n\n\n3056167.0\n\n\n1.0\n\n\n\n\n7\n\n\nREGION IV-A\n\n\nVILLAR, CYNTHIA\n\n\n3660112.0\n\n\n1.0\n\n\n\n\n8\n\n\nREGION IV-B\n\n\nVILLAR, CYNTHIA\n\n\n688494.0\n\n\n1.0\n\n\n\n\n9\n\n\nREGION IX\n\n\nGO, BONG GO\n\n\n663927.0\n\n\n1.0\n\n\n\n\n10\n\n\nREGION V\n\n\nPOE, GRACE\n\n\n1417114.0\n\n\n1.0\n\n\n\n\n11\n\n\nREGION VI\n\n\nVILLAR, CYNTHIA\n\n\n1064681.0\n\n\n1.0\n\n\n\n\n12\n\n\nREGION VII\n\n\nVILLAR, CYNTHIA\n\n\n1307605.0\n\n\n1.0\n\n\n\n\n13\n\n\nREGION VIII\n\n\nVILLAR, CYNTHIA\n\n\n1132757.0\n\n\n1.0\n\n\n\n\n14\n\n\nREGION X\n\n\nGO, BONG GO\n\n\n949392.0\n\n\n1.0\n\n\n\n\n15\n\n\nREGION XI\n\n\nGO, BONG GO\n\n\n1002771.0\n\n\n1.0\n\n\n\n\n16\n\n\nREGION XII\n\n\nVILLAR, CYNTHIA\n\n\n983354.0\n\n\n1.0\n\n\n\n\n17\n\n\nREGION XIII\n\n\nGO, BONG GO\n\n\n777931.0\n\n\n1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn [22]:\n\n\n&lt;div class=\"input_area\"&gt;\n\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank')\n .reset_index())\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[22]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nCandidate Name\n\n\nRank\n\n\n\n\n\n\n0\n\n\nPOE, GRACE\n\n\n1.0\n\n\n\n\n1\n\n\nMARCOS, IMEE\n\n\n2.0\n\n\n\n\n2\n\n\nGO, BONG GO\n\n\n5.0\n\n\n\n\n3\n\n\nVILLAR, CYNTHIA\n\n\n10.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn [23]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nfig, ax = plt.subplots()\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank').plot\n .barh(color='#BF5209', ax=ax));\nax.set_xlabel('Rank');\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n D. Dominant Party per Region\n\n\n\n\n\n\n\n\n\n\n\nThere are three main political parties vying for the senatorial seats:\n\n\n\nLIBERAL PARTY\n\n\nNACIONALISTA PARTY\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN (PDP-LABAN)\n\n\n\nWe looked at the dominant or majority political party per administrative region, and identify if any regions have any affiliations to a certain party.\n\n\n\n\n\n\n\nIn [24]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_party = df_senators.groupby(['region_raw', 'party_name']).agg({\n    'votes_per_province': sum})\ndf_party['rank'] = df_party.groupby(\n    'region_raw')['votes_per_province'].rank('dense', ascending=False)\ndf_party.reset_index(inplace=True)\ndf_leading_party = df_party[df_party['rank'] == 1].copy()\ndf_leading_party.columns = ['Region', 'Party', 'Votes', 'Rank']\ndf_leading_party.sort_values(['Region', 'Rank'], inplace=True)\ndf_leading_party\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[24]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nRegion\n\n\nParty\n\n\nVotes\n\n\nRank\n\n\n\n\n\n\n13\n\n\nBARMM\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n2596572.0\n\n\n1.0\n\n\n\n\n32\n\n\nCAR\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n1028536.0\n\n\n1.0\n\n\n\n\n51\n\n\nNCR\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n10400476.0\n\n\n1.0\n\n\n\n\n68\n\n\nREGION I\n\n\nNACIONALISTA PARTY\n\n\n4361859.0\n\n\n1.0\n\n\n\n\n87\n\n\nREGION II\n\n\nNACIONALISTA PARTY\n\n\n2474544.0\n\n\n1.0\n\n\n\n\n108\n\n\nREGION III\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n7804389.0\n\n\n1.0\n\n\n\n\n127\n\n\nREGION IV-A\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n9542856.0\n\n\n1.0\n\n\n\n\n146\n\n\nREGION IV-B\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n1733733.0\n\n\n1.0\n\n\n\n\n165\n\n\nREGION IX\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n2571518.0\n\n\n1.0\n\n\n\n\n180\n\n\nREGION V\n\n\nLIBERAL PARTY\n\n\n4885924.0\n\n\n1.0\n\n\n\n\n199\n\n\nREGION VI\n\n\nLIBERAL PARTY\n\n\n4335427.0\n\n\n1.0\n\n\n\n\n222\n\n\nREGION VII\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n5480074.0\n\n\n1.0\n\n\n\n\n241\n\n\nREGION VIII\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n3442654.0\n\n\n1.0\n\n\n\n\n260\n\n\nREGION X\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n3697535.0\n\n\n1.0\n\n\n\n\n279\n\n\nREGION XI\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n3654361.0\n\n\n1.0\n\n\n\n\n298\n\n\nREGION XII\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n3861166.0\n\n\n1.0\n\n\n\n\n317\n\n\nREGION XIII\n\n\nPARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN\n\n\n2858376.0\n\n\n1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can clearly see a voting bias of each region.\n\n\nMajority of Region 1 and Region 2 has a voting preference towards the NACIONALISTA PARTY. This can be attributed to the fact that Imee Marcos, who hails from Ilocos Norte, is a Nacionalista.\n\n\nMajority of Region 5 and Region 6 has a voting preference towards the LIBERAL PARTY. This is also expected since Leni Robredo, incumbent Vice President who is from the Liberal Party, is a Bicolano.\n\n\nThe remainder of the Philippines has a voting preference towards the PDP-LABAN.\n\n\n\n\n\n\n\nIn [25]:\n\n\n&lt;div class=\"input_area\"&gt;\n\nmerged = ph0.merge(df_leading_party, left_on='region', right_on='Region')\ncolors = 18\ncolor_map = {'PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN': 'red', \n             'LIBERAL PARTY': 'yellow',\n             'NACIONALISTA PARTY': 'green'}\n\nfig, ax = plt.subplots(1, 1, figsize = (10,12));\nax.set_title('Dominant political party per region', fontsize=20);\n\nfor party in list(merged['Party'].unique()):\n    color_map[party]\n    merged[merged['Party'] == party].plot(ax=ax, color = color_map[party], \n                                          categorical = True, \n                                          figsize=(10,12), legend=True)\n\nmerged.geometry.boundary.plot(color=None,edgecolor='k',linewidth = .5,ax=ax);\nplt.rcParams.update({'font.size': 18})\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n E. Dominant Coalition Per Region\n\n\n\n\n\n\n\n\n\n\n\nAside from individual candidates and parties, we also looked at the dominant coalition per region by counting the number of senate seats obtained by each coalition. The results indicate that HNP gained a majority of the seats across all regions, especially in Mindanao.\n\n\nThe only regions where HNP did not gain a solid majority are in Bicol Region (Region V) and Eastern Visayas (Region VI), known bailwicks of the Liberal Party.\n\n\n\n\n\n\n\nIn [26]:\n\n\n&lt;div class=\"input_area\"&gt;\n\n\ndef get_coalition_seats():\n    \"\"\"\n    Returns a dataframe of the number of seats won per coalition per region\n\n    Returns\n    -------\n    coalition : pd.DataFrame\n\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'],\n        as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1))\\\n        * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats = coalition_seats.reset_index()\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition',\n        values='is_top_12', aggfunc=np.sum)\n    coalition_seats['coalition_seats_total'] = coalition_seats.sum(axis=1)\n\n    for coalition in coalition_seats.columns[:-1]:\n        coalition_seats['party_seats_pct_' + coalition] = \\\n            coalition_seats[coalition] / \\\n            coalition_seats['coalition_seats_total']\n        coalition_seats.rename(\n            columns={coalition: 'coalition_seats_count_' + coalition},\n            inplace=True)\n\n    coalition_seats = coalition_seats.round(5)\n    coalition_seats = coalition_seats.reset_index()\n    return coalition_seats\n\n\ncoalition = get_coalition_seats()\nmerged = ph0.merge(coalition[[\n                   'region', 'coalition_seats_count_HNP']], left_on='region',\n                   right_on='region')\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 15))\nmerged.plot('coalition_seats_count_HNP', ax=ax, cmap='YlOrRd', legend=True)\nax.set_title('Number of HNP senate seats won', fontsize=24)\nmerged.geometry.boundary.plot(color=None, edgecolor='k', linewidth=1, ax=ax)\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[26]:&lt;/div&gt;\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x7f7e6f1d58d0&gt;\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n F. Is Demographics Related To Voting Preference?\n\n\n\n\n\n\n\n\n\n\n\nIs the voting preference of a region related to its demographics such as literacy rate and religious affiliation? To answer this, we obtained the 2015 Census Data. The directory is a collection of excel files, where each excel file corresponds to a certain region and province. If we explore each file, we can see that each sheet corresponds to a different demographic feature table. For this analysis, we are intrested at sheets T8 and T11.\n\n\nThe get_census_religion loads the imporant columns and rows from sheet T8. It also adds an additional column based on the region. Similarly, the get_census_education loads the imporant columns and rows from sheet T11. It also aggregates each individual years experience column into a singular cumulative column.\n\n\nFinally, the read_census_files aggregates the 2016 regional data into singular dataframe by using get_census_religion and get_census_education functions. To extract only the regional files, the read_census_files uses regex to get filenames with only underscores in the beginning (this is an indicator of regional data).\n\n\n\n\n\n\n\nIn [27]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndef get_census_religion(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by religion\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T8', header=None,\n                       usecols=[0, 1, 2, 3],\n                       skiprows=6, skip_blank_lines=True,\n                       skipfooter=3,\n                       names=['religion', 'total', 'm', 'f'])\n    df.sort_values('total', ascending=False, inplace=True)\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'religion', 'm', 'f', 'total']\n    df = df[cols]\n    return df\n\n\ndef get_census_education(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by education\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T11',\n                       usecols=[0, 15, 16, 17, 18, 19, 20],\n                       skiprows=3,\n                       skip_blank_lines=True, nrows=20,\n                       names=['education', '18', '19',\n                              '20_24', '25_29', '30_34', '35_above'])\n    df.dropna(how='any', inplace=True)\n    df.reset_index(inplace=True, drop=True)\n    df.drop(df.index[[0, 5, 6, 7, 9, 10, 12, 13]], inplace=True)\n    df['total'] = (df['18'] + df['19'] + df['20_24'] + df['25_29'] +\n                   df['30_34'] + df['35_above'])\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'education', '18', '19', '20_24', '25_29', '30_34',\n            '35_above', 'total']\n    df = df[cols]\n    return df\n\n\ndef read_census_files(path):\n    '''\n    Reads all census regional files\n\n    Parameter\n    ---------\n    path      : string, filepath to census directory\n\n    Returns\n    -------\n    Dictionary of dataframes\n    '''\n    total = {'religion': pd.DataFrame(),\n             'education': pd.DataFrame()}\n\n    for filepath in glob.glob(path + \".xls\", recursive=True):\n        if re.match('_(?!PHILIPPINES)', os.path.basename(filepath)):\n            total['religion'] = (total['religion']\n                                 .append(get_census_religion(filepath)))\n            total['education'] = (total['education']\n                                  .append(get_census_education(filepath)))\n    total['religion'].reset_index(inplace=True, drop=True)\n    total['education'].reset_index(inplace=True, drop=True)\n\n    for df in total.values():\n        df.loc[(df['region'] == \"ARMM\"), 'region'] = 'BARMM'\n        df.loc[(df['region'] == \"MIMAROPA\"), 'region'] = 'REGION IV-B'\n        df.loc[(df['region'] == \"CARAGA\"), 'region'] = 'REGION XIII'\n    return total\n\n\n&lt;/div&gt;\n\n\n\n\n\n\nIn [28]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ncensus_path = '/mnt/data/public/census/*'\ncensus_dict = read_census_files(census_path)\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n G. Is literacy rate related to voting preference?\n\n\n\n\n\n\n\n\n\n\n\nWe looked at the number of seats obtained by each coalition per region, then correlated it to literacy rate. Education information was obtained from the 2015 Census data.\n\n\n\n\n\n\n\n\n\n\n\nWe looked at the literacy rate \\(\\frac{n_{educated}}{n_{total}}\\) of each administrative region:\n\n\n\n\n\n\n\nIn [29]:\n\n\n&lt;div class=\"input_area\"&gt;\n\n\ndef get_education_percent():\n    '''\n    Gets percentage of educational level per region\n    '''\n    education = census_dict['education'].groupby(\n        ['region', 'education'], as_index=False).sum()\n    education = pd.pivot_table(\n        education, index='region', columns='education', values='total')\n    education.columns = ['education_pct_' + educ for educ in education.columns]\n    education['education_total'] = education.sum(axis=1)\n    for educ in education.columns[:-1]:\n        education[educ] /= education['education_total']\n    education.drop('education_total', axis=1, inplace=True)\n    education = education.round(5)\n\n    return education\n\n\ndef get_agg_education_percent():\n    '''\n    Gets aggregated percentage of educational level per region\n    '''\n    df_educ = get_education_percent()\n    df_educ = df_educ.reset_index()\n    df_educ['educated'] = (1 - df_educ['education_pct_No Grade Completed']\n                           - df_educ['education_pct_Not Stated'])\n    df_educ['not_educated'] = df_educ['education_pct_No Grade Completed']\n    df_educ['unknown'] = df_educ['education_pct_Not Stated']\n    df_educ.drop(columns=['education_pct_Academic Degree Holder',\n                          'education_pct_College Undergraduate',\n                          'education_pct_Elementary',\n                          'education_pct_High School',\n                          'education_pct_No Grade Completed',\n                          'education_pct_Not Stated',\n                          'education_pct_Post Baccalaureate',\n                          'education_pct_Post-Secondary',\n                          'education_pct_Pre-School',\n                          'education_pct_Special Education'], inplace=True)\n    df_educ.set_index('region', inplace=True)\n    df_educ.reset_index(inplace=True)\n    return df_educ\n\n\ndf_educ = get_agg_education_percent()\ndf_educ\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[29]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nregion\n\n\neducated\n\n\nnot_educated\n\n\nunknown\n\n\n\n\n\n\n0\n\n\nBARMM\n\n\n0.85355\n\n\n0.14105\n\n\n0.00540\n\n\n\n\n1\n\n\nCAR\n\n\n0.97376\n\n\n0.02622\n\n\n0.00002\n\n\n\n\n2\n\n\nNCR\n\n\n0.99234\n\n\n0.00221\n\n\n0.00545\n\n\n\n\n3\n\n\nNIR\n\n\n0.98085\n\n\n0.01882\n\n\n0.00033\n\n\n\n\n4\n\n\nREGION I\n\n\n0.99321\n\n\n0.00679\n\n\n0.00000\n\n\n\n\n5\n\n\nREGION II\n\n\n0.98610\n\n\n0.01389\n\n\n0.00001\n\n\n\n\n6\n\n\nREGION III\n\n\n0.99355\n\n\n0.00615\n\n\n0.00030\n\n\n\n\n7\n\n\nREGION IV-A\n\n\n0.99473\n\n\n0.00519\n\n\n0.00008\n\n\n\n\n8\n\n\nREGION IV-B\n\n\n0.96573\n\n\n0.03417\n\n\n0.00010\n\n\n\n\n9\n\n\nREGION IX\n\n\n0.96456\n\n\n0.03486\n\n\n0.00058\n\n\n\n\n10\n\n\nREGION V\n\n\n0.99126\n\n\n0.00851\n\n\n0.00023\n\n\n\n\n11\n\n\nREGION VI\n\n\n0.98721\n\n\n0.01257\n\n\n0.00022\n\n\n\n\n12\n\n\nREGION VII\n\n\n0.98753\n\n\n0.01209\n\n\n0.00038\n\n\n\n\n13\n\n\nREGION VIII\n\n\n0.97679\n\n\n0.02297\n\n\n0.00024\n\n\n\n\n14\n\n\nREGION X\n\n\n0.98095\n\n\n0.01856\n\n\n0.00049\n\n\n\n\n15\n\n\nREGION XI\n\n\n0.97818\n\n\n0.02050\n\n\n0.00132\n\n\n\n\n16\n\n\nREGION XII\n\n\n0.94792\n\n\n0.05034\n\n\n0.00174\n\n\n\n\n17\n\n\nREGION XIII\n\n\n0.98487\n\n\n0.01503\n\n\n0.00010\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe then checked if the number of seats obtained by each coalition is correlated to the literacy rate of that region. First, we obtained the number of seats obtained by each coalition per region:\n\n\n\n\n\n\n\nIn [30]:\n\n\n&lt;div class=\"input_area\"&gt;\n\n\ndef get_coalition_rank():\n    \"\"\"\n    Get number of seats obtained by each coalition\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'], as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1)) * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats.reset_index(inplace=True)\n\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition', values='is_top_12', aggfunc=np.sum)\n    return coalition_seats\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nWe then merge this with the education dataframe, then get the correlation:\n\n\n\n\n\n\n\nIn [31]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_coal_educ = get_agg_education_percent().set_index('region').join(get_coalition_rank())\ndf_coal_educ['Educated'] = df_coal_educ['educated']\ndf_coal_educ['Not Educated'] = df_coal_educ['not_educated']\ncorr = df_coal_educ.corr().loc[['Otso Diretso', 'HNP'],['Educated', 'Not Educated']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Census and election data show that the voting preference of a region has no correlation with its literacy rate. We now look at religion to see if it has a correlation with the voting preference.\n\n\n\n\n\n\n\n\n\n\n\n H. Is religion related to voting preference?\n\n\n\n\n\n\n\n\n\n\n\nWe also looked into the religious affiliation per region, and checked if it is correlatd with voting preference.\n\n\nFirst, we obtained the distribution of religions per region from the Census data:\n\n\n\n\n\n\n\nIn [32]:\n\n\n&lt;div class=\"input_area\"&gt;\n\n\ndef get_religion_percent():\n    \"\"\"\n    Get percentages of religion per region\n    \"\"\"\n    religion = census_dict['religion'].groupby(\n        ['region', 'religion'], as_index=False).sum()\n    religion = pd.pivot_table(\n        religion, index='region', columns='religion', values='total')\n    religion.columns = ['religion_pct_' + rel for rel in religion.columns]\n    religion['religion_total'] = religion.sum(axis=1)\n    for rel in religion.columns[:-1]:\n        religion[rel] /= religion['religion_total']\n    religion.drop('religion_total', axis=1, inplace=True)\n    religion = religion.round(5)\n    return religion\n\n\ndf_rel = get_religion_percent()\n\n\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nWe then merged the religion census data with the coalition ranking data to check if religion has correlation with the number of seats obtained by each coalition:\n\n\n\n\n\n\n\nIn [33]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_coal_rel = get_religion_percent().join(get_coalition_rank())\ndf_coal_rel.head()\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt output_prompt\"&gt;Out[33]:&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nreligion_pct_Aglipay\n\n\nreligion_pct_Association of Baptist Churches in Luzon, Visayas, and Mindanao\n\n\nreligion_pct_Association of Fundamental Baptist Churches in the Philippines\n\n\nreligion_pct_Bible Baptist Church\n\n\nreligion_pct_Bread of Life Ministries\n\n\nreligion_pct_Buddhist\n\n\nreligion_pct_Cathedral of Praise, Incorporated\n\n\nreligion_pct_Church of Christ\n\n\nreligion_pct_Church of Jesus Christ of the Latter Day Saints\n\n\nreligion_pct_Convention of the Philippine Baptist Church\n\n\n…\n\n\nreligion_pct_Tribal Religions\n\n\nreligion_pct_UNIDA Evangelical Church\n\n\nreligion_pct_Union Espiritista Cristiana de Filipinas, Incorporated\n\n\nreligion_pct_United Church of Christ in the Philippines\n\n\nreligion_pct_United Pentecostal Church (Philippines), Incorporated\n\n\nreligion_pct_Victory Chapel Christian Fellowship\n\n\nreligion_pct_Way of Salvation Church, Incorporated\n\n\nHNP\n\n\nNone\n\n\nOtso Diretso\n\n\n\n\nregion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBARMM\n\n\n0.00030\n\n\n0.00001\n\n\n0.00010\n\n\n0.00077\n\n\n0.00000\n\n\n0.00000\n\n\n0.00000\n\n\n0.00008\n\n\n0.00001\n\n\n0.00000\n\n\n…\n\n\n0.00425\n\n\n0.00000\n\n\n0.00067\n\n\n0.00029\n\n\n0.00021\n\n\n0.00001\n\n\n0.00000\n\n\n9\n\n\n2\n\n\n1\n\n\n\n\nCAR\n\n\n0.00340\n\n\n0.00006\n\n\n0.00487\n\n\n0.01283\n\n\n0.00004\n\n\n0.00011\n\n\n0.00002\n\n\n0.00619\n\n\n0.00129\n\n\n0.00001\n\n\n…\n\n\n0.00186\n\n\n0.00001\n\n\n0.01327\n\n\n0.02350\n\n\n0.01824\n\n\n0.00016\n\n\n0.00011\n\n\n9\n\n\n3\n\n\n0\n\n\n\n\nNCR\n\n\n0.00137\n\n\n0.00003\n\n\n0.00005\n\n\n0.00434\n\n\n0.00022\n\n\n0.00113\n\n\n0.00013\n\n\n0.00188\n\n\n0.00121\n\n\n0.00002\n\n\n…\n\n\n0.00018\n\n\n0.00002\n\n\n0.00001\n\n\n0.00024\n\n\n0.00045\n\n\n0.00532\n\n\n0.00003\n\n\n9\n\n\n3\n\n\n0\n\n\n\n\nNIR\n\n\n0.02162\n\n\n0.00006\n\n\n0.00728\n\n\n0.01026\n\n\n0.00007\n\n\n0.00007\n\n\n0.00002\n\n\n0.00267\n\n\n0.00434\n\n\n0.00117\n\n\n…\n\n\n0.00098\n\n\n0.00000\n\n\n0.00002\n\n\n0.01507\n\n\n0.00196\n\n\n0.00100\n\n\n0.00001\n\n\n7\n\n\n3\n\n\n2\n\n\n\n\nREGION I\n\n\n0.00694\n\n\n0.00004\n\n\n0.00010\n\n\n0.00425\n\n\n0.00009\n\n\n0.00009\n\n\n0.00004\n\n\n0.00370\n\n\n0.00388\n\n\n0.00005\n\n\n…\n\n\n0.00029\n\n\n0.00001\n\n\n0.00259\n\n\n0.00551\n\n\n0.00492\n\n\n0.00032\n\n\n0.00108\n\n\n9\n\n\n3\n\n\n0\n\n\n\n\n\n\n5 rows × 56 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom getting the correlation of the religion data with the number of seats per coalition, it is apparent that the Voting preference of a region has no correlation with its religious affiliation.\n\n\n\n\n\n\n\nIn [34]:\n\n\n&lt;div class=\"input_area\"&gt;\n\ndf_coal_rel['Roman Catholic'] = df_coal_rel['religion_pct_Roman Catholic, including Catholic Charismatic']\ndf_coal_rel['Islam'] = df_coal_rel['religion_pct_Islam']\ndf_coal_rel['Iglesia ni Cristo'] = df_coal_rel['religion_pct_Iglesia ni Cristo']\ncorr = df_coal_rel.corr().loc[\n    ['Roman Catholic','Islam','Iglesia ni Cristo'],['HNP','Otso Diretso']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);\n\n\n&lt;/div&gt;\n\n\n\n\n\n&lt;div class=\"prompt\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n I. Conclusion\n\n\n\n\n\n\n\n\n\n\n\nUpon checking both the Comelec 2019 Election Results and the 2015 Philippine Census data, we found out that voting preference is characterized by high regionality. Candidates have a homecourt advantage, and voters tend to vote candidates or parties affiliated with their home region.\n\n\nAlso, literacy rate and religious affiliation is not correlated to voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "",
    "text": "The Philippines recently concluded its 2019 midterm elections last May 13. Sixty-two (62) candidates from various political parties contested for twelve (12) seats in the Senate of The Philippines. Given the unexpected results, the team was wondering on the following topics:\nfrom IPython.display import HTML\n\nHTML('''&lt;script&gt;\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n&lt;/script&gt;\n&lt;form action=\"javascript:code_toggle()\"&gt;&lt;input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"&gt;&lt;/form&gt;''')\nBefore anything else, let us first load all important modules for this exercise.\nimport os\nimport io\nimport re\nimport time\nimport glob\nimport requests\nimport urllib.request\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport seaborn as sns\nIt is important to identify the datasets we are going to use for this exercise. The two identified datasets the group intends to use are: the 2019 National Data and the 2015-2016 Census data.\nWith regards to 2019 National data, the team used a web scapper provided Prof. Alis. The web scapper downloaded the election results from the Commission of Elections’ 2019 National and Local Elections website. The results were then stored in a local repository which is then easily accesible for the team. The 2019 elections results are broken down into two main directories: results and contest. In this exercise, the team will explore both directories to map out a comprehensive summary of the 2019 senatorial and party elections.\nSecondly, the 2015-2016 Census data has already been stored in a local repository for easier access. One of the main reasons why the team decided to use the 2015-2016 Census data is because of the lack of availability of recent data. The Philippine Statistics Authority only releases a comprehensive census survey ever six years. However for the purpose of this exercise, the team has agreed that the 2015-2016 census data can act as an appproximate for today’s population."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#a.-methodology",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#a.-methodology",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " A. Methodology",
    "text": "A. Methodology\n\n Step 1: Extract and collect the 2019 Elections (Results) data\nThe first directory to explore is the 2019 Election results. The results directory contains all electoral results from a regional level down to the barangay level. For each level, a specific coc.json file is stored. This file contains all electoral results data and metadata for both national and local elections. However for the purposes of this analysis, we will only look at the aggregated elections data at the regional level. The files that we are interested are the coc.json files associated to each province, as these files contain the metadata and data on the election results.\nThe main structure of each coc.json file contains the following main keys: vbc, rs, sts, obs, and cos. For the purpose of this exercise, the important key the group needs to extract is the rs key as this provides the each candidate’s total votes per area. Under the rs key, the following keys can be found: cc, bo, v, tot, per, and ser. Cross referencing these keys with official statements and comelec documentations suggests that important keys are as follows: cc pertaining to contest_type, bo pertaining to the candidate_id, and v pertaining to votes_per_province.\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\nbo\nContestant id\n\n\nv\nTotal votes per contestant\n\n\ntot\nTotal votes per province\n\n\n\nHowever, it must be pointed out that the available data only goes as high as provincial data. If we want to process the provincial level, the team will have to aggregate the data up.\nThe group created utility functions for easier retrieval of the provincial elections datasets. The purpose for the utility functions (and future utility functions) are for initial cleaning and manipulations. This is to ensure each dataset is ready for aggregation.\nThe get_province_coc method unpacks each key and value from the coc.json dictionary into a cleaned up dataframe. In addition, the method identifies which region and province the file originated from by examining the filepath that was passed.\nThe get_all_province_coc method is a walker that goes through each of the results directory. The walker checks if the filename has an equal value to coc.json. If a coc.json was located, the get_province_coc method is applied with the filepath as the parameter. The resulting dataframe is then appended to a master dataframe for further extraction and analysis. For this exercise, the group only had to extract data up to the regional and provincial levels so only three wildcard were use for the glob walker.\nSpecial methods (get_ncr_coc and get_all_ncr_coc) were established to get the cities’ coc.json. For the case of the NCR cities, theire associated coc.json files were one directory lower.\n\ndef get_province_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-2]\n        province = dirpath.split('/')[-1]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_province_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Created a new column to deal with the reclassification of\n        \"NEGROS ORIENTAL\" and \"NEGROS OCCIDENTAL\" to \"NIR\" \n            to match the PSA 2016 dataset.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if os.path.basename(file) == 'coc.json':\n            df = get_province_coc(file)\n            total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    total.loc[(total['province'] == \"NEGROS ORIENTAL\") |\n              (total['province'] == \"NEGROS OCCIDENTAL\"), 'region'] = 'NIR'\n    return total\n\n\ndef get_ncr_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe    \n\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-3]\n        province = dirpath.split('/')[-2]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_ncr_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if file.split('/')[7] == 'NCR':\n            if os.path.basename(file) == 'coc.json':\n                df = get_ncr_coc(file)\n                total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    return total\n\n\n\nWith these utility functions inplace, the team can now apply these methods for easier access to the 2019 elections data.\nWe can now compile all of the election results with the following line:\n\ntree = '/mnt/data/public/elections/nle2019/results/*/*/*'\nncr_tree = '/mnt/data/public/elections/nle2019/results/*/*/*/*'\ndf_results = get_all_province_coc(tree)\ndf_results = df_results.append(get_all_ncr_coc(ncr_tree))\ndf_results.drop_duplicates(inplace=True)\n\n\ndf_results.head(5)\n\n\n\n\n\n\n\n\nvbc\ncc\nbo\nv\ntot\nper\nser\nregion_raw\nprovince\nregion\n\n\n\n\n0\n89550\n1.0\n1.0\n2004.0\n1708769.0\n0.11\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n1\n89550\n1.0\n2.0\n1607.0\n1708769.0\n0.09\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n2\n89550\n1.0\n3.0\n8772.0\n1708769.0\n0.51\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n3\n89550\n1.0\n4.0\n1767.0\n1708769.0\n0.10\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n4\n89550\n1.0\n5.0\n5068.0\n1708769.0\n0.29\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n\n\n\n\n\n\n\nNext, let us examine the obtained dataset with actual election results.\nBy cross checking the results with Comelec data, we can identify the senators and party names.\nJust to check our data, we can look at an example senator from the dataset. By choosing cc=1 and bo=46, we are actually highlighting Imee Marcos’ senatorial candidacy results.\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_marcos = df_results.query('cc == 1 & bo == 46').copy()\ndf_marcos.groupby('region').sum()['v'].sort_values(\n    ascending=True).plot.barh(figsize=(10, 10),\n                              title='Contestant: 46 - Imee Marcos',\n                              color='#BF5209', ax=ax);\n\n\n\n\nAdditionally, let us check some descriptive statistics for the 2019 Elections dataset. More specifically, let us examine the v or votes column. The group will be highly dependent on the votes data so let us first do some initial statistics and visualizations.\n\ndf_test = df_results.groupby(['region', 'province'])['v'].sum().to_frame()\ndf_test = df_test.rename(columns={'v': 'votes'})\ndf_test\n\n\n\n\n\n\n\n\n\nvotes\n\n\nregion\nprovince\n\n\n\n\n\nBARMM\nBASILAN\n2093067.0\n\n\nLANAO DEL SUR\n4770462.0\n\n\nMAGUINDANAO\n5917983.0\n\n\nSULU\n3529555.0\n\n\nTAWI-TAWI\n1874486.0\n\n\nCAR\nABRA\n1923481.0\n\n\nAPAYAO\n703002.0\n\n\nBENGUET\n2426397.0\n\n\nIFUGAO\n1408688.0\n\n\nKALINGA\n1621414.0\n\n\nMOUNTAIN PROVINCE\n1074249.0\n\n\nNCR\nNATIONAL CAPITAL REGION - FOURTH DISTRICT\n22896771.0\n\n\nNATIONAL CAPITAL REGION - MANILA\n13461229.0\n\n\nNATIONAL CAPITAL REGION - SECOND DISTRICT\n29803007.0\n\n\nNATIONAL CAPITAL REGION - THIRD DISTRICT\n18481014.0\n\n\nTAGUIG - PATEROS\n10018306.0\n\n\nNIR\nNEGROS OCCIDENTAL\n12453486.0\n\n\nNEGROS ORIENTAL\n6900077.0\n\n\nREGION I\nILOCOS NORTE\n3614806.0\n\n\nILOCOS SUR\n4882048.0\n\n\nLA UNION\n5764844.0\n\n\nPANGASINAN\n19803192.0\n\n\nREGION II\nBATANES\n118412.0\n\n\nCAGAYAN\n6890994.0\n\n\nISABELA\n9632919.0\n\n\nNUEVA VIZCAYA\n3200395.0\n\n\nQUIRINO\n1198929.0\n\n\nREGION III\nAURORA\n1493909.0\n\n\nBATAAN\n6433641.0\n\n\nBULACAN\n19567555.0\n\n\n...\n...\n...\n\n\nREGION VI\nGUIMARAS\n1217864.0\n\n\nILOILO\n11118379.0\n\n\nREGION VII\nBOHOL\n8977777.0\n\n\nCEBU\n19919139.0\n\n\nSIQUIJOR\n694813.0\n\n\nREGION VIII\nBILIRAN\n1051266.0\n\n\nEASTERN SAMAR\n3370187.0\n\n\nLEYTE\n9366390.0\n\n\nNORTHERN SAMAR\n3733282.0\n\n\nSAMAR (WESTERN SAMAR)\n5954800.0\n\n\nSOUTHERN LEYTE\n2558108.0\n\n\nREGION X\nBUKIDNON\n7415656.0\n\n\nCAMIGUIN\n768370.0\n\n\nLANAO DEL NORTE\n3584638.0\n\n\nMISAMIS OCCIDENTAL\n4391884.0\n\n\nMISAMIS ORIENTAL\n6488743.0\n\n\nREGION XI\nCOMPOSTELA VALLEY\n4281424.0\n\n\nDAVAO (DAVAO DEL NORTE)\n7056455.0\n\n\nDAVAO DEL SUR\n4457484.0\n\n\nDAVAO OCCIDENTAL\n1378314.0\n\n\nDAVAO ORIENTAL\n3200605.0\n\n\nREGION XII\nCOTABATO (NORTH COT.)\n7659458.0\n\n\nSARANGANI\n2990485.0\n\n\nSOUTH COTABATO\n9090438.0\n\n\nSULTAN KUDARAT\n4037874.0\n\n\nREGION XIII\nAGUSAN DEL NORTE\n4670054.0\n\n\nAGUSAN DEL SUR\n4155305.0\n\n\nDINAGAT ISLANDS\n735236.0\n\n\nSURIGAO DEL NORTE\n3979284.0\n\n\nSURIGAO DEL SUR\n4116338.0\n\n\n\n\n86 rows × 1 columns\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION III',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['NCR',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION IV-A',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION VII',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\nTo match the contestant ID to the contestant name, the contest files were also downloaded from the Commission of Elections’ 2019 National and Local Elections website and stored in the local repository. Similar to the results directory, the contest directory contained json files for each contest type/position. Upon inspection of a sample file within the directory, the following values were obtained:\nThe pertinent keys from each json files were:\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\ncn\nContest code name - location\n\n\nccc\nContest code name\n\n\ntype\nContest type\n\n\nbos\nlist of candidate parameters\n\n\n\nUnder the bos key, we can extract each of the candidates’ parameters. The more useful ones for the group’s study include:\n\n\n\nParameter\nDescription\n\n\n\n\nboc\nContestant ID\n\n\nbon\nContestant Name\n\n\npn\nParty Name\n\n\n\n\n\n\n Step 2: Extract and collect the 2019 Elections (Contestant) data\nThe group also created utility functions for easier retrieval of the contestant datasets. This is to ensure each dataset is ready for aggregation.\nSimilar to the get_province_coc, the get_contestant_attrib method unpacks each key and value from the {contest_number}.json dictionary into a cleaned up dataframe. The method converts the bos directory into an additional list, which will also be appended into the resulting dataframe.\nThere are two (2) major political coalitions fighting for the senate seats: * Hugpong ng Pagbabago (HNP) * Otso Diretso\nSimilar to the get_all_province_coc, the get_contestants_attrib method is a walker that goes through each of the contest directory. The method will first append all {contest_numer}.json files into a singular dataframe. Next, the method creates a new column that identifies who among the senatorial candidates are part of the Hugpong ng Pagbabago (HNP) or Otso Diretso campaign.\n\ndef get_contestant_attrib(filepath):\n    \"\"\"\n    Returns the contestant json file into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestnat attributes\n\n    \"\"\"\n\n    contestants_values = []\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n        attrib_keys = [key for key in list(data.keys())\n                       if isinstance(key, (str, float, int))]\n        attrib_values = [value for value in list(data.values())\n                         if isinstance(value, (str, float, int))]\n        contest_values = [list(contest.values()) for contest in data['bos']]\n        df = pd.DataFrame(contest_values,\n                          columns=list(data['bos'][0].keys()))\n        for k, v in zip(attrib_keys, attrib_values):\n            df[k] = v\n    return df\n\n\ndef get_contestants_attrib(filepath):\n    \"\"\"\n    Returns ALL contestant json files into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n    df = pd.DataFrame()\n    for each_filepath in glob.glob(filepath):\n        df = df.append(get_contestant_attrib(each_filepath))\n    senators = df[df.cc == 1].copy()\n    senators['bon'] = senators['bon'].str.extract(pat='(.*?) \\(')\n    party = df[df.cc == 5567].copy()\n    df = senators.append(party)\n    df.drop_duplicates(inplace=True)\n    df.rename(columns={'boc': 'bo'}, inplace=True)\n    otso = ['AQUINO, BENIGNO BAM ', 'DIOKNO, CHEL', 'HILBAY, PILO',\n            'MACALINTAL, MACAROMY', 'GUTOC, SAMIRA', 'ALEJANO, GARY',\n            'ROXAS, MAR', 'TAÑADA,LORENZO ERIN TAPAT']\n    hnp = ['ANGARA, EDGARDO SONNY', 'BONG REVILLA, RAMON JR', 'CAYETANO, PIA',\n           'DELA ROSA, BATO', 'EJERCITO, ESTRADA JV', 'ESTRADA, JINGGOY',\n           'GO, BONG GO', 'MANGUDADATU, DONG', 'MANICAD, JIGGY',\n           'MARCOS, IMEE', 'PIMENTEL, KOKO', 'TOLENTINO, FRANCIS', \n           'VILLAR, CYNTHIA']\n    for o in otso:\n        df.loc[df.bon == o, 'coalition'] = \"Otso Diretso\"\n    for h in hnp:\n        df.loc[df.bon == h, 'coalition'] = \"HNP\"\n    df['coalition'] = df['coalition'].fillna('None')\n    return df\n\nLet us run the get_contestants_attrib. This will be used later in the blog for our further analysis.\n\ncontestant_filepaths = '/mnt/data/public/elections/nle2019/contests/*'\ndf_contestants = get_contestants_attrib(contestant_filepaths)\ndf_contestants.head()\n\nWe now have two dataframes: df_results containing the 2019 election results, and df_contestants containing the contestant information. These two dataframes can now be merged into a single dataframe. Let us also drop certain columns which we have deemed as unimportant.\n\ndef merge_comelec(results, contestants):\n    \"\"\"\n    Merge results dataframe with contestants dataframe\n\n    Parameters\n    ----------\n    results    : pd.DataFrame\n    contestants: pd.DataFrame\n\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n\n    df = pd.merge(results, contestants, on=['bo', 'cc'], how='left')\n    df = df.drop(['vbc', 'boi', 'to', 'pc', 'pcc', 'pcy', 'pcm',\n                  'pck', 'ccc', 'pre', 'ser', 'cn'], axis=1)\n    df.columns = ['position', 'candidate_id', 'votes_per_province',\n                  'total_votes', 'votes_in_pct', 'region_raw', 'province',\n                  'region', 'candidate_name', 'party_name',\n                  'contest_position', 'contest_type', 'coalition']\n    return df\n\n\nnle2019 = merge_comelec(df_results, df_contestants)\nnle2019.region.unique()\n\n\n\n Step 3: Load Geopandas for geospatial processing \nThe Philippines is composed of seventeen (17) administrative regions. We can use the geopandas module to manage and pre-process geospatial data.\nLet us first load up a geopandas graph of the Philippines.\n\nfig, ax = plt.subplots(1, figsize=(10, 15), frameon=True)\n\nph0 = gpd.GeoDataFrame.from_file(\"ph_regions.shp\")\nph0.plot(ax=ax, cmap='Greens', edgecolor='#555555', k=18)\nax.set_title('Regions of the Philippines')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nfor ind, row in ph0.iterrows():\n    ax.text(row[\"geometry\"].centroid.x, row[\"geometry\"].centroid.y,\n            row[\"region\"])"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#b.-national-senatorial-results",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#b.-national-senatorial-results",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " B. National Senatorial Results",
    "text": "B. National Senatorial Results\n\nLet us look at the senatorial candidates. Let us total up the votes by candidate and see the top 12 winners.\n\ndf_senators = nle2019[nle2019['contest_position'] == 'SENATOR']\ndf_senator = df_senators.groupby(['candidate_name']).agg(\n    {'votes_per_province': sum}).reset_index()\ndf_senator.sort_values('votes_per_province', ascending=False, inplace=True)\ndf_senator.columns = ['Candidate', 'Votes']\ndf_senator.head(12)\n\n\nfig, ax = plt.subplots(figsize=(15,8))\nplt.rcParams.update({'font.size': 14})\ndf_senator.set_index('Candidate').head(12).sort_values(\n    by='Votes', ascending=True).plot.barh(ax=ax,\n    title='Top 12 Candidates, in Millions', color='#BF5209', legend=False);\nax.set_xlabel('Total Votes');"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#c.-top-senator-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#c.-top-senator-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " C. Top Senator Per Region",
    "text": "C. Top Senator Per Region\nWe want to find out won across all the regions. If there is any bias for cetain candidates. Based on our findings, we can see that candidate Cynthia Villar won majority of the regions.\nIt is interesting to note that the top ranking senator for Ilocos Region (Region I) and the Cordillera Administrative Region (CAR) is Imee Marcos, which hails from that region. This confirms that there is a “Solid North”, and that support for the Marcoses still exists in that area.\nFor the Mindanao regions, the top candidate is Bong Go, former special assistant to President Duterte, who is from Mindanao.\nThese show that Philippine politics is very regional in nature. Voters will naturally support their hometown candidate, regardless of the issues surrounding that candidate.\n\ndf_senator_region = df_senators.groupby(\n    ['region', 'candidate_name']).agg({'votes_per_province': sum})\ndf_senator_region['rank'] = df_senator_region.groupby(\n    'region')['votes_per_province'].rank('dense', ascending=False)\ndf_senator_region = df_senator_region[df_senator_region['rank'] == 1].reset_index()\ndf_senator_region.columns = ['Region', 'Candidate Name', 'Votes', 'Rank']\ndf_senator_region\n\n\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank')\n .reset_index())\n\n\nfig, ax = plt.subplots()\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank').plot\n .barh(color='#BF5209', ax=ax));\nax.set_xlabel('Rank');"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#d.-dominant-party-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#d.-dominant-party-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " D. Dominant Party per Region",
    "text": "D. Dominant Party per Region\nThere are three main political parties vying for the senatorial seats: 1. LIBERAL PARTY 2. NACIONALISTA PARTY 3. PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN (PDP-LABAN)\nWe looked at the dominant or majority political party per administrative region, and identify if any regions have any affiliations to a certain party.\n\ndf_party = df_senators.groupby(['region_raw', 'party_name']).agg({\n    'votes_per_province': sum})\ndf_party['rank'] = df_party.groupby(\n    'region_raw')['votes_per_province'].rank('dense', ascending=False)\ndf_party.reset_index(inplace=True)\ndf_leading_party = df_party[df_party['rank'] == 1].copy()\ndf_leading_party.columns = ['Region', 'Party', 'Votes', 'Rank']\ndf_leading_party.sort_values(['Region', 'Rank'], inplace=True)\ndf_leading_party\n\nWe can clearly see a voting bias of each region.\nMajority of Region 1 and Region 2 has a voting preference towards the NACIONALISTA PARTY. This can be attributed to the fact that Imee Marcos, who hails from Ilocos Norte, is a Nacionalista.\nMajority of Region 5 and Region 6 has a voting preference towards the LIBERAL PARTY. This is also expected since Leni Robredo, incumbent Vice President who is from the Liberal Party, is a Bicolano.\nThe remainder of the Philippines has a voting preference towards the PDP-LABAN.\n\nmerged = ph0.merge(df_leading_party, left_on='region', right_on='Region')\ncolors = 18\ncolor_map = {'PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN': 'red', \n             'LIBERAL PARTY': 'yellow',\n             'NACIONALISTA PARTY': 'green'}\n\nfig, ax = plt.subplots(1, 1, figsize = (10,12));\nax.set_title('Dominant political party per region', fontsize=20);\n\nfor party in list(merged['Party'].unique()):\n    color_map[party]\n    merged[merged['Party'] == party].plot(ax=ax, color = color_map[party], \n                                          categorical = True, \n                                          figsize=(10,12), legend=True)\n\nmerged.geometry.boundary.plot(color=None,edgecolor='k',linewidth = .5,ax=ax);\nplt.rcParams.update({'font.size': 18})"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#e.-dominant-coalition-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#e.-dominant-coalition-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " E. Dominant Coalition Per Region",
    "text": "E. Dominant Coalition Per Region\nAside from individual candidates and parties, we also looked at the dominant coalition per region by counting the number of senate seats obtained by each coalition. The results indicate that HNP gained a majority of the seats across all regions, especially in Mindanao.\nThe only regions where HNP did not gain a solid majority are in Bicol Region (Region V) and Eastern Visayas (Region VI), known bailwicks of the Liberal Party.\n\ndef get_coalition_seats():\n    \"\"\"\n    Returns a dataframe of the number of seats won per coalition per region\n\n    Returns\n    -------\n    coalition : pd.DataFrame\n\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'],\n        as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1))\\\n        * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats = coalition_seats.reset_index()\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition',\n        values='is_top_12', aggfunc=np.sum)\n    coalition_seats['coalition_seats_total'] = coalition_seats.sum(axis=1)\n\n    for coalition in coalition_seats.columns[:-1]:\n        coalition_seats['party_seats_pct_' + coalition] = \\\n            coalition_seats[coalition] / \\\n            coalition_seats['coalition_seats_total']\n        coalition_seats.rename(\n            columns={coalition: 'coalition_seats_count_' + coalition},\n            inplace=True)\n\n    coalition_seats = coalition_seats.round(5)\n    coalition_seats = coalition_seats.reset_index()\n    return coalition_seats\n\n\ncoalition = get_coalition_seats()\nmerged = ph0.merge(coalition[[\n                   'region', 'coalition_seats_count_HNP']], left_on='region',\n                   right_on='region')\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 15))\nmerged.plot('coalition_seats_count_HNP', ax=ax, cmap='YlOrRd', legend=True)\nax.set_title('Number of HNP senate seats won', fontsize=24)\nmerged.geometry.boundary.plot(color=None, edgecolor='k', linewidth=1, ax=ax)"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#f.-is-demographics-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#f.-is-demographics-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " F. Is Demographics Related To Voting Preference?",
    "text": "F. Is Demographics Related To Voting Preference?\nIs the voting preference of a region related to its demographics such as literacy rate and religious affiliation? To answer this, we obtained the 2015 Census Data. The directory is a collection of excel files, where each excel file corresponds to a certain region and province. If we explore each file, we can see that each sheet corresponds to a different demographic feature table. For this analysis, we are intrested at sheets T8 and T11.\nThe get_census_religion loads the imporant columns and rows from sheet T8. It also adds an additional column based on the region. Similarly, the get_census_education loads the imporant columns and rows from sheet T11. It also aggregates each individual years experience column into a singular cumulative column.\nFinally, the read_census_files aggregates the 2016 regional data into singular dataframe by using get_census_religion and get_census_education functions. To extract only the regional files, the read_census_files uses regex to get filenames with only underscores in the beginning (this is an indicator of regional data).\n\ndef get_census_religion(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by religion\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T8', header=None,\n                       usecols=[0, 1, 2, 3],\n                       skiprows=6, skip_blank_lines=True,\n                       skipfooter=3,\n                       names=['religion', 'total', 'm', 'f'])\n    df.sort_values('total', ascending=False, inplace=True)\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'religion', 'm', 'f', 'total']\n    df = df[cols]\n    return df\n\n\ndef get_census_education(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by education\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T11',\n                       usecols=[0, 15, 16, 17, 18, 19, 20],\n                       skiprows=3,\n                       skip_blank_lines=True, nrows=20,\n                       names=['education', '18', '19',\n                              '20_24', '25_29', '30_34', '35_above'])\n    df.dropna(how='any', inplace=True)\n    df.reset_index(inplace=True, drop=True)\n    df.drop(df.index[[0, 5, 6, 7, 9, 10, 12, 13]], inplace=True)\n    df['total'] = (df['18'] + df['19'] + df['20_24'] + df['25_29'] +\n                   df['30_34'] + df['35_above'])\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'education', '18', '19', '20_24', '25_29', '30_34',\n            '35_above', 'total']\n    df = df[cols]\n    return df\n\n\ndef read_census_files(path):\n    '''\n    Reads all census regional files\n\n    Parameter\n    ---------\n    path      : string, filepath to census directory\n\n    Returns\n    -------\n    Dictionary of dataframes\n    '''\n    total = {'religion': pd.DataFrame(),\n             'education': pd.DataFrame()}\n\n    for filepath in glob.glob(path + \".xls\", recursive=True):\n        if re.match('_(?!PHILIPPINES)', os.path.basename(filepath)):\n            total['religion'] = (total['religion']\n                                 .append(get_census_religion(filepath)))\n            total['education'] = (total['education']\n                                  .append(get_census_education(filepath)))\n    total['religion'].reset_index(inplace=True, drop=True)\n    total['education'].reset_index(inplace=True, drop=True)\n\n    for df in total.values():\n        df.loc[(df['region'] == \"ARMM\"), 'region'] = 'BARMM'\n        df.loc[(df['region'] == \"MIMAROPA\"), 'region'] = 'REGION IV-B'\n        df.loc[(df['region'] == \"CARAGA\"), 'region'] = 'REGION XIII'\n    return total\n\n\ncensus_path = '/mnt/data/public/census/*'\ncensus_dict = read_census_files(census_path)"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#g.-is-literacy-rate-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#g.-is-literacy-rate-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " G. Is literacy rate related to voting preference?",
    "text": "G. Is literacy rate related to voting preference?\nWe looked at the number of seats obtained by each coalition per region, then correlated it to literacy rate. Education information was obtained from the 2015 Census data.\nWe looked at the literacy rate \\(\\frac{n_{educated}}{n_{total}}\\) of each administrative region:\n\ndef get_education_percent():\n    '''\n    Gets percentage of educational level per region\n    '''\n    education = census_dict['education'].groupby(\n        ['region', 'education'], as_index=False).sum()\n    education = pd.pivot_table(\n        education, index='region', columns='education', values='total')\n    education.columns = ['education_pct_' + educ for educ in education.columns]\n    education['education_total'] = education.sum(axis=1)\n    for educ in education.columns[:-1]:\n        education[educ] /= education['education_total']\n    education.drop('education_total', axis=1, inplace=True)\n    education = education.round(5)\n\n    return education\n\n\ndef get_agg_education_percent():\n    '''\n    Gets aggregated percentage of educational level per region\n    '''\n    df_educ = get_education_percent()\n    df_educ = df_educ.reset_index()\n    df_educ['educated'] = (1 - df_educ['education_pct_No Grade Completed']\n                           - df_educ['education_pct_Not Stated'])\n    df_educ['not_educated'] = df_educ['education_pct_No Grade Completed']\n    df_educ['unknown'] = df_educ['education_pct_Not Stated']\n    df_educ.drop(columns=['education_pct_Academic Degree Holder',\n                          'education_pct_College Undergraduate',\n                          'education_pct_Elementary',\n                          'education_pct_High School',\n                          'education_pct_No Grade Completed',\n                          'education_pct_Not Stated',\n                          'education_pct_Post Baccalaureate',\n                          'education_pct_Post-Secondary',\n                          'education_pct_Pre-School',\n                          'education_pct_Special Education'], inplace=True)\n    df_educ.set_index('region', inplace=True)\n    df_educ.reset_index(inplace=True)\n    return df_educ\n\n\ndf_educ = get_agg_education_percent()\ndf_educ\n\nWe then checked if the number of seats obtained by each coalition is correlated to the literacy rate of that region. First, we obtained the number of seats obtained by each coalition per region:\n\ndef get_coalition_rank():\n    \"\"\"\n    Get number of seats obtained by each coalition\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'], as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1)) * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats.reset_index(inplace=True)\n\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition', values='is_top_12', aggfunc=np.sum)\n    return coalition_seats\n\nWe then merge this with the education dataframe, then get the correlation:\n\ndf_coal_educ = get_agg_education_percent().set_index('region').join(get_coalition_rank())\ndf_coal_educ['Educated'] = df_coal_educ['educated']\ndf_coal_educ['Not Educated'] = df_coal_educ['not_educated']\ncorr = df_coal_educ.corr().loc[['Otso Diretso', 'HNP'],['Educated', 'Not Educated']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);\n\nThe Census and election data show that the voting preference of a region has no correlation with its literacy rate. We now look at religion to see if it has a correlation with the voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#h.-is-religion-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#h.-is-religion-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " H. Is religion related to voting preference?",
    "text": "H. Is religion related to voting preference?\nWe also looked into the religious affiliation per region, and checked if it is correlatd with voting preference.\nFirst, we obtained the distribution of religions per region from the Census data:\n\ndef get_religion_percent():\n    \"\"\"\n    Get percentages of religion per region\n    \"\"\"\n    religion = census_dict['religion'].groupby(\n        ['region', 'religion'], as_index=False).sum()\n    religion = pd.pivot_table(\n        religion, index='region', columns='religion', values='total')\n    religion.columns = ['religion_pct_' + rel for rel in religion.columns]\n    religion['religion_total'] = religion.sum(axis=1)\n    for rel in religion.columns[:-1]:\n        religion[rel] /= religion['religion_total']\n    religion.drop('religion_total', axis=1, inplace=True)\n    religion = religion.round(5)\n    return religion\n\n\ndf_rel = get_religion_percent()\n\nWe then merged the religion census data with the coalition ranking data to check if religion has correlation with the number of seats obtained by each coalition:\n\ndf_coal_rel = get_religion_percent().join(get_coalition_rank())\ndf_coal_rel.head()\n\nFrom getting the correlation of the religion data with the number of seats per coalition, it is apparent that the Voting preference of a region has no correlation with its religious affiliation.\n\ndf_coal_rel['Roman Catholic'] = df_coal_rel['religion_pct_Roman Catholic, including Catholic Charismatic']\ndf_coal_rel['Islam'] = df_coal_rel['religion_pct_Islam']\ndf_coal_rel['Iglesia ni Cristo'] = df_coal_rel['religion_pct_Iglesia ni Cristo']\ncorr = df_coal_rel.corr().loc[\n    ['Roman Catholic','Islam','Iglesia ni Cristo'],['HNP','Otso Diretso']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#i.-conclusion",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#i.-conclusion",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " I. Conclusion",
    "text": "I. Conclusion\nUpon checking both the Comelec 2019 Election Results and the 2015 Philippine Census data, we found out that voting preference is characterized by high regionality. Candidates have a homecourt advantage, and voters tend to vote candidates or parties affiliated with their home region.\nAlso, literacy rate and religious affiliation is not correlated to voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#acknowledgements",
    "href": "posts/20230414_Philippine_Voting_Preferences/DMW_Lab01_20190529_2.html#acknowledgements",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe would like to thank Prof Christian Alis and the ACCeSS Laboratory for the access to the high-performance computing facility."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#a.-methodology",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#a.-methodology",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " A. Methodology",
    "text": "A. Methodology\n\n Step 1: Extract and collect the 2019 Elections (Results) data\nThe first directory to explore is the 2019 Election results. The results directory contains all electoral results from a regional level down to the barangay level. For each level, a specific coc.json file is stored. This file contains all electoral results data and metadata for both national and local elections. However for the purposes of this analysis, we will only look at the aggregated elections data at the regional level. The files that we are interested are the coc.json files associated to each province, as these files contain the metadata and data on the election results.\nThe main structure of each coc.json file contains the following main keys: vbc, rs, sts, obs, and cos. For the purpose of this exercise, the important key the group needs to extract is the rs key as this provides the each candidate’s total votes per area. Under the rs key, the following keys can be found: cc, bo, v, tot, per, and ser. Cross referencing these keys with official statements and comelec documentations suggests that important keys are as follows: cc pertaining to contest_type, bo pertaining to the candidate_id, and v pertaining to votes_per_province.\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\nbo\nContestant id\n\n\nv\nTotal votes per contestant\n\n\ntot\nTotal votes per province\n\n\n\nHowever, it must be pointed out that the available data only goes as high as provincial data. If we want to process the provincial level, the team will have to aggregate the data up.\nThe group created utility functions for easier retrieval of the provincial elections datasets. The purpose for the utility functions (and future utility functions) are for initial cleaning and manipulations. This is to ensure each dataset is ready for aggregation.\nThe get_province_coc method unpacks each key and value from the coc.json dictionary into a cleaned up dataframe. In addition, the method identifies which region and province the file originated from by examining the filepath that was passed.\nThe get_all_province_coc method is a walker that goes through each of the results directory. The walker checks if the filename has an equal value to coc.json. If a coc.json was located, the get_province_coc method is applied with the filepath as the parameter. The resulting dataframe is then appended to a master dataframe for further extraction and analysis. For this exercise, the group only had to extract data up to the regional and provincial levels so only three wildcard were use for the glob walker.\nSpecial methods (get_ncr_coc and get_all_ncr_coc) were established to get the cities’ coc.json. For the case of the NCR cities, theire associated coc.json files were one directory lower.\n\n\nWith these utility functions inplace, the team can now apply these methods for easier access to the 2019 elections data.\nWe can now compile all of the election results with the following line:\n\n\n\n\n\n\n\n\n\nvbc\ncc\nbo\nv\ntot\nper\nser\nregion_raw\nprovince\nregion\n\n\n\n\n0\n89550\n1.0\n1.0\n2004.0\n1708769.0\n0.11\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n1\n89550\n1.0\n2.0\n1607.0\n1708769.0\n0.09\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n2\n89550\n1.0\n3.0\n8772.0\n1708769.0\n0.51\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n3\n89550\n1.0\n4.0\n1767.0\n1708769.0\n0.10\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n4\n89550\n1.0\n5.0\n5068.0\n1708769.0\n0.29\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n\n\n\n\n\n\n\nNext, let us examine the obtained dataset with actual election results.\nBy cross checking the results with Comelec data, we can identify the senators and party names.\nJust to check our data, we can look at an example senator from the dataset. By choosing cc=1 and bo=46, we are actually highlighting Imee Marcos’ senatorial candidacy results.\n\n\n\n\n\nAdditionally, let us check some descriptive statistics for the 2019 Elections dataset. More specifically, let us examine the v or votes column. The group will be highly dependent on the votes data so let us first do some initial statistics and visualizations.\n\n\n\n\n\n\n\n\n\n\nvotes\n\n\nregion\nprovince\n\n\n\n\n\nBARMM\nBASILAN\n2093067.0\n\n\nLANAO DEL SUR\n4770462.0\n\n\nMAGUINDANAO\n5917983.0\n\n\nSULU\n3529555.0\n\n\nTAWI-TAWI\n1874486.0\n\n\nCAR\nABRA\n1923481.0\n\n\nAPAYAO\n703002.0\n\n\nBENGUET\n2426397.0\n\n\nIFUGAO\n1408688.0\n\n\nKALINGA\n1621414.0\n\n\nMOUNTAIN PROVINCE\n1074249.0\n\n\nNCR\nNATIONAL CAPITAL REGION - FOURTH DISTRICT\n22896771.0\n\n\nNATIONAL CAPITAL REGION - MANILA\n13461229.0\n\n\nNATIONAL CAPITAL REGION - SECOND DISTRICT\n29803007.0\n\n\nNATIONAL CAPITAL REGION - THIRD DISTRICT\n18481014.0\n\n\nTAGUIG - PATEROS\n10018306.0\n\n\nNIR\nNEGROS OCCIDENTAL\n12453486.0\n\n\nNEGROS ORIENTAL\n6900077.0\n\n\nREGION I\nILOCOS NORTE\n3614806.0\n\n\nILOCOS SUR\n4882048.0\n\n\nLA UNION\n5764844.0\n\n\nPANGASINAN\n19803192.0\n\n\nREGION II\nBATANES\n118412.0\n\n\nCAGAYAN\n6890994.0\n\n\nISABELA\n9632919.0\n\n\nNUEVA VIZCAYA\n3200395.0\n\n\nQUIRINO\n1198929.0\n\n\nREGION III\nAURORA\n1493909.0\n\n\nBATAAN\n6433641.0\n\n\nBULACAN\n19567555.0\n\n\n...\n...\n...\n\n\nREGION VI\nGUIMARAS\n1217864.0\n\n\nILOILO\n11118379.0\n\n\nREGION VII\nBOHOL\n8977777.0\n\n\nCEBU\n19919139.0\n\n\nSIQUIJOR\n694813.0\n\n\nREGION VIII\nBILIRAN\n1051266.0\n\n\nEASTERN SAMAR\n3370187.0\n\n\nLEYTE\n9366390.0\n\n\nNORTHERN SAMAR\n3733282.0\n\n\nSAMAR (WESTERN SAMAR)\n5954800.0\n\n\nSOUTHERN LEYTE\n2558108.0\n\n\nREGION X\nBUKIDNON\n7415656.0\n\n\nCAMIGUIN\n768370.0\n\n\nLANAO DEL NORTE\n3584638.0\n\n\nMISAMIS OCCIDENTAL\n4391884.0\n\n\nMISAMIS ORIENTAL\n6488743.0\n\n\nREGION XI\nCOMPOSTELA VALLEY\n4281424.0\n\n\nDAVAO (DAVAO DEL NORTE)\n7056455.0\n\n\nDAVAO DEL SUR\n4457484.0\n\n\nDAVAO OCCIDENTAL\n1378314.0\n\n\nDAVAO ORIENTAL\n3200605.0\n\n\nREGION XII\nCOTABATO (NORTH COT.)\n7659458.0\n\n\nSARANGANI\n2990485.0\n\n\nSOUTH COTABATO\n9090438.0\n\n\nSULTAN KUDARAT\n4037874.0\n\n\nREGION XIII\nAGUSAN DEL NORTE\n4670054.0\n\n\nAGUSAN DEL SUR\n4155305.0\n\n\nDINAGAT ISLANDS\n735236.0\n\n\nSURIGAO DEL NORTE\n3979284.0\n\n\nSURIGAO DEL SUR\n4116338.0\n\n\n\n\n86 rows × 1 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo match the contestant ID to the contestant name, the contest files were also downloaded from the Commission of Elections’ 2019 National and Local Elections website and stored in the local repository. Similar to the results directory, the contest directory contained json files for each contest type/position. Upon inspection of a sample file within the directory, the following values were obtained:\nThe pertinent keys from each json files were:\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\ncn\nContest code name - location\n\n\nccc\nContest code name\n\n\ntype\nContest type\n\n\nbos\nlist of candidate parameters\n\n\n\nUnder the bos key, we can extract each of the candidates’ parameters. The more useful ones for the group’s study include:\n\n\n\nParameter\nDescription\n\n\n\n\nboc\nContestant ID\n\n\nbon\nContestant Name\n\n\npn\nParty Name\n\n\n\n\n\n\n Step 2: Extract and collect the 2019 Elections (Contestant) data\nThe group also created utility functions for easier retrieval of the contestant datasets. This is to ensure each dataset is ready for aggregation.\nSimilar to the get_province_coc, the get_contestant_attrib method unpacks each key and value from the {contest_number}.json dictionary into a cleaned up dataframe. The method converts the bos directory into an additional list, which will also be appended into the resulting dataframe.\nThere are two (2) major political coalitions fighting for the senate seats: * Hugpong ng Pagbabago (HNP) * Otso Diretso\nSimilar to the get_all_province_coc, the get_contestants_attrib method is a walker that goes through each of the contest directory. The method will first append all {contest_numer}.json files into a singular dataframe. Next, the method creates a new column that identifies who among the senatorial candidates are part of the Hugpong ng Pagbabago (HNP) or Otso Diretso campaign.\nLet us run the get_contestants_attrib. This will be used later in the blog for our further analysis.\nWe now have two dataframes: df_results containing the 2019 election results, and df_contestants containing the contestant information. These two dataframes can now be merged into a single dataframe. Let us also drop certain columns which we have deemed as unimportant.\n\n\n Step 3: Load Geopandas for geospatial processing \nThe Philippines is composed of seventeen (17) administrative regions. We can use the geopandas module to manage and pre-process geospatial data.\nLet us first load up a geopandas graph of the Philippines."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#c.-top-senator-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#c.-top-senator-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " C. Top Senator Per Region",
    "text": "C. Top Senator Per Region\nWe want to find out won across all the regions. If there is any bias for cetain candidates. Based on our findings, we can see that candidate Cynthia Villar won majority of the regions.\nIt is interesting to note that the top ranking senator for Ilocos Region (Region I) and the Cordillera Administrative Region (CAR) is Imee Marcos, which hails from that region. This confirms that there is a “Solid North”, and that support for the Marcoses still exists in that area.\nFor the Mindanao regions, the top candidate is Bong Go, former special assistant to President Duterte, who is from Mindanao.\nThese show that Philippine politics is very regional in nature. Voters will naturally support their hometown candidate, regardless of the issues surrounding that candidate."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#d.-dominant-party-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#d.-dominant-party-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " D. Dominant Party per Region",
    "text": "D. Dominant Party per Region\nThere are three main political parties vying for the senatorial seats: 1. LIBERAL PARTY 2. NACIONALISTA PARTY 3. PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN (PDP-LABAN)\nWe looked at the dominant or majority political party per administrative region, and identify if any regions have any affiliations to a certain party.\nWe can clearly see a voting bias of each region.\nMajority of Region 1 and Region 2 has a voting preference towards the NACIONALISTA PARTY. This can be attributed to the fact that Imee Marcos, who hails from Ilocos Norte, is a Nacionalista.\nMajority of Region 5 and Region 6 has a voting preference towards the LIBERAL PARTY. This is also expected since Leni Robredo, incumbent Vice President who is from the Liberal Party, is a Bicolano.\nThe remainder of the Philippines has a voting preference towards the PDP-LABAN."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#e.-dominant-coalition-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#e.-dominant-coalition-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " E. Dominant Coalition Per Region",
    "text": "E. Dominant Coalition Per Region\nAside from individual candidates and parties, we also looked at the dominant coalition per region by counting the number of senate seats obtained by each coalition. The results indicate that HNP gained a majority of the seats across all regions, especially in Mindanao.\nThe only regions where HNP did not gain a solid majority are in Bicol Region (Region V) and Eastern Visayas (Region VI), known bailwicks of the Liberal Party."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#f.-is-demographics-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#f.-is-demographics-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " F. Is Demographics Related To Voting Preference?",
    "text": "F. Is Demographics Related To Voting Preference?\nIs the voting preference of a region related to its demographics such as literacy rate and religious affiliation? To answer this, we obtained the 2015 Census Data. The directory is a collection of excel files, where each excel file corresponds to a certain region and province. If we explore each file, we can see that each sheet corresponds to a different demographic feature table. For this analysis, we are intrested at sheets T8 and T11.\nThe get_census_religion loads the imporant columns and rows from sheet T8. It also adds an additional column based on the region. Similarly, the get_census_education loads the imporant columns and rows from sheet T11. It also aggregates each individual years experience column into a singular cumulative column.\nFinally, the read_census_files aggregates the 2016 regional data into singular dataframe by using get_census_religion and get_census_education functions. To extract only the regional files, the read_census_files uses regex to get filenames with only underscores in the beginning (this is an indicator of regional data)."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#g.-is-literacy-rate-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#g.-is-literacy-rate-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " G. Is literacy rate related to voting preference?",
    "text": "G. Is literacy rate related to voting preference?\nWe looked at the number of seats obtained by each coalition per region, then correlated it to literacy rate. Education information was obtained from the 2015 Census data.\nWe looked at the literacy rate \\(\\frac{n_{educated}}{n_{total}}\\) of each administrative region:\nWe then checked if the number of seats obtained by each coalition is correlated to the literacy rate of that region. First, we obtained the number of seats obtained by each coalition per region:\nWe then merge this with the education dataframe, then get the correlation:\nThe Census and election data show that the voting preference of a region has no correlation with its literacy rate. We now look at religion to see if it has a correlation with the voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#h.-is-religion-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#h.-is-religion-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " H. Is religion related to voting preference?",
    "text": "H. Is religion related to voting preference?\nWe also looked into the religious affiliation per region, and checked if it is correlatd with voting preference.\nFirst, we obtained the distribution of religions per region from the Census data:\nWe then merged the religion census data with the coalition ranking data to check if religion has correlation with the number of seats obtained by each coalition:\nFrom getting the correlation of the religion data with the number of seats per coalition, it is apparent that the Voting preference of a region has no correlation with its religious affiliation."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#i.-conclusion",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#i.-conclusion",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " I. Conclusion",
    "text": "I. Conclusion\nUpon checking both the Comelec 2019 Election Results and the 2015 Philippine Census data, we found out that voting preference is characterized by high regionality. Candidates have a homecourt advantage, and voters tend to vote candidates or parties affiliated with their home region.\nAlso, literacy rate and religious affiliation is not correlated to voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#acknowledgements",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#acknowledgements",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe would like to thank Prof Christian Alis and the ACCeSS Laboratory for the access to the high-performance computing facility."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index.html#b.-national-senatorial-results",
    "href": "posts/20230414_Philippine_Voting_Preferences/index.html#b.-national-senatorial-results",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " B. National Senatorial Results",
    "text": "B. National Senatorial Results\n\nLet us look at the senatorial candidates. Let us total up the votes by candidate and see the top 12 winners."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "",
    "text": "The Philippines recently concluded its 2019 midterm elections last May 13. Sixty-two (62) candidates from various political parties contested for twelve (12) seats in the Senate of The Philippines. Given the unexpected results, the team was wondering on the following topics:\nfrom IPython.display import HTML\n\nHTML('''&lt;script&gt;\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n&lt;/script&gt;\n&lt;form action=\"javascript:code_toggle()\"&gt;&lt;input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"&gt;&lt;/form&gt;''')\nBefore anything else, let us first load all important modules for this exercise.\nimport os\nimport io\nimport re\nimport time\nimport glob\nimport requests\nimport urllib.request\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport seaborn as sns\nIt is important to identify the datasets we are going to use for this exercise. The two identified datasets the group intends to use are: the 2019 National Data and the 2015-2016 Census data.\nWith regards to 2019 National data, the team used a web scapper provided Prof. Alis. The web scapper downloaded the election results from the Commission of Elections’ 2019 National and Local Elections website. The results were then stored in a local repository which is then easily accesible for the team. The 2019 elections results are broken down into two main directories: results and contest. In this exercise, the team will explore both directories to map out a comprehensive summary of the 2019 senatorial and party elections.\nSecondly, the 2015-2016 Census data has already been stored in a local repository for easier access. One of the main reasons why the team decided to use the 2015-2016 Census data is because of the lack of availability of recent data. The Philippine Statistics Authority only releases a comprehensive census survey ever six years. However for the purpose of this exercise, the team has agreed that the 2015-2016 census data can act as an appproximate for today’s population."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#a.-methodology",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#a.-methodology",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " A. Methodology",
    "text": "A. Methodology\n\n Step 1: Extract and collect the 2019 Elections (Results) data\nThe first directory to explore is the 2019 Election results. The results directory contains all electoral results from a regional level down to the barangay level. For each level, a specific coc.json file is stored. This file contains all electoral results data and metadata for both national and local elections. However for the purposes of this analysis, we will only look at the aggregated elections data at the regional level. The files that we are interested are the coc.json files associated to each province, as these files contain the metadata and data on the election results.\nThe main structure of each coc.json file contains the following main keys: vbc, rs, sts, obs, and cos. For the purpose of this exercise, the important key the group needs to extract is the rs key as this provides the each candidate’s total votes per area. Under the rs key, the following keys can be found: cc, bo, v, tot, per, and ser. Cross referencing these keys with official statements and comelec documentations suggests that important keys are as follows: cc pertaining to contest_type, bo pertaining to the candidate_id, and v pertaining to votes_per_province.\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\nbo\nContestant id\n\n\nv\nTotal votes per contestant\n\n\ntot\nTotal votes per province\n\n\n\nHowever, it must be pointed out that the available data only goes as high as provincial data. If we want to process the provincial level, the team will have to aggregate the data up.\nThe group created utility functions for easier retrieval of the provincial elections datasets. The purpose for the utility functions (and future utility functions) are for initial cleaning and manipulations. This is to ensure each dataset is ready for aggregation.\nThe get_province_coc method unpacks each key and value from the coc.json dictionary into a cleaned up dataframe. In addition, the method identifies which region and province the file originated from by examining the filepath that was passed.\nThe get_all_province_coc method is a walker that goes through each of the results directory. The walker checks if the filename has an equal value to coc.json. If a coc.json was located, the get_province_coc method is applied with the filepath as the parameter. The resulting dataframe is then appended to a master dataframe for further extraction and analysis. For this exercise, the group only had to extract data up to the regional and provincial levels so only three wildcard were use for the glob walker.\nSpecial methods (get_ncr_coc and get_all_ncr_coc) were established to get the cities’ coc.json. For the case of the NCR cities, theire associated coc.json files were one directory lower.\n\ndef get_province_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-2]\n        province = dirpath.split('/')[-1]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_province_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Created a new column to deal with the reclassification of\n        \"NEGROS ORIENTAL\" and \"NEGROS OCCIDENTAL\" to \"NIR\" \n            to match the PSA 2016 dataset.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if os.path.basename(file) == 'coc.json':\n            df = get_province_coc(file)\n            total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    total.loc[(total['province'] == \"NEGROS ORIENTAL\") |\n              (total['province'] == \"NEGROS OCCIDENTAL\"), 'region'] = 'NIR'\n    return total\n\n\ndef get_ncr_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe    \n\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-3]\n        province = dirpath.split('/')[-2]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\ndef get_all_ncr_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if file.split('/')[7] == 'NCR':\n            if os.path.basename(file) == 'coc.json':\n                df = get_ncr_coc(file)\n                total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    return total\n\n\n\nWith these utility functions inplace, the team can now apply these methods for easier access to the 2019 elections data.\nWe can now compile all of the election results with the following line:\n\ntree = '/mnt/data/public/elections/nle2019/results/*/*/*'\nncr_tree = '/mnt/data/public/elections/nle2019/results/*/*/*/*'\ndf_results = get_all_province_coc(tree)\ndf_results = df_results.append(get_all_ncr_coc(ncr_tree))\ndf_results.drop_duplicates(inplace=True)\n\n\ndf_results.head(5)\n\n\n\n\n\n\n\n\nvbc\ncc\nbo\nv\ntot\nper\nser\nregion_raw\nprovince\nregion\n\n\n\n\n0\n89550\n1.0\n1.0\n2004.0\n1708769.0\n0.11\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n1\n89550\n1.0\n2.0\n1607.0\n1708769.0\n0.09\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n2\n89550\n1.0\n3.0\n8772.0\n1708769.0\n0.51\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n3\n89550\n1.0\n4.0\n1767.0\n1708769.0\n0.10\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n4\n89550\n1.0\n5.0\n5068.0\n1708769.0\n0.29\n2800.0\nREGION I\nILOCOS NORTE\nREGION I\n\n\n\n\n\n\n\n\n\nNext, let us examine the obtained dataset with actual election results.\nBy cross checking the results with Comelec data, we can identify the senators and party names.\nJust to check our data, we can look at an example senator from the dataset. By choosing cc=1 and bo=46, we are actually highlighting Imee Marcos’ senatorial candidacy results.\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_marcos = df_results.query('cc == 1 & bo == 46').copy()\ndf_marcos.groupby('region').sum()['v'].sort_values(\n    ascending=True).plot.barh(figsize=(10, 10),\n                              title='Contestant: 46 - Imee Marcos',\n                              color='#BF5209', ax=ax);\n\n\n\n\nAdditionally, let us check some descriptive statistics for the 2019 Elections dataset. More specifically, let us examine the v or votes column. The group will be highly dependent on the votes data so let us first do some initial statistics and visualizations.\n\ndf_test = df_results.groupby(['region', 'province'])['v'].sum().to_frame()\ndf_test = df_test.rename(columns={'v': 'votes'})\ndf_test\n\n\n\n\n\n\n\n\n\nvotes\n\n\nregion\nprovince\n\n\n\n\n\nBARMM\nBASILAN\n2093067.0\n\n\nLANAO DEL SUR\n4770462.0\n\n\nMAGUINDANAO\n5917983.0\n\n\nSULU\n3529555.0\n\n\nTAWI-TAWI\n1874486.0\n\n\nCAR\nABRA\n1923481.0\n\n\nAPAYAO\n703002.0\n\n\nBENGUET\n2426397.0\n\n\nIFUGAO\n1408688.0\n\n\nKALINGA\n1621414.0\n\n\nMOUNTAIN PROVINCE\n1074249.0\n\n\nNCR\nNATIONAL CAPITAL REGION - FOURTH DISTRICT\n22896771.0\n\n\nNATIONAL CAPITAL REGION - MANILA\n13461229.0\n\n\nNATIONAL CAPITAL REGION - SECOND DISTRICT\n29803007.0\n\n\nNATIONAL CAPITAL REGION - THIRD DISTRICT\n18481014.0\n\n\nTAGUIG - PATEROS\n10018306.0\n\n\nNIR\nNEGROS OCCIDENTAL\n12453486.0\n\n\nNEGROS ORIENTAL\n6900077.0\n\n\nREGION I\nILOCOS NORTE\n3614806.0\n\n\nILOCOS SUR\n4882048.0\n\n\nLA UNION\n5764844.0\n\n\nPANGASINAN\n19803192.0\n\n\nREGION II\nBATANES\n118412.0\n\n\nCAGAYAN\n6890994.0\n\n\nISABELA\n9632919.0\n\n\nNUEVA VIZCAYA\n3200395.0\n\n\nQUIRINO\n1198929.0\n\n\nREGION III\nAURORA\n1493909.0\n\n\nBATAAN\n6433641.0\n\n\nBULACAN\n19567555.0\n\n\n...\n...\n...\n\n\nREGION VI\nGUIMARAS\n1217864.0\n\n\nILOILO\n11118379.0\n\n\nREGION VII\nBOHOL\n8977777.0\n\n\nCEBU\n19919139.0\n\n\nSIQUIJOR\n694813.0\n\n\nREGION VIII\nBILIRAN\n1051266.0\n\n\nEASTERN SAMAR\n3370187.0\n\n\nLEYTE\n9366390.0\n\n\nNORTHERN SAMAR\n3733282.0\n\n\nSAMAR (WESTERN SAMAR)\n5954800.0\n\n\nSOUTHERN LEYTE\n2558108.0\n\n\nREGION X\nBUKIDNON\n7415656.0\n\n\nCAMIGUIN\n768370.0\n\n\nLANAO DEL NORTE\n3584638.0\n\n\nMISAMIS OCCIDENTAL\n4391884.0\n\n\nMISAMIS ORIENTAL\n6488743.0\n\n\nREGION XI\nCOMPOSTELA VALLEY\n4281424.0\n\n\nDAVAO (DAVAO DEL NORTE)\n7056455.0\n\n\nDAVAO DEL SUR\n4457484.0\n\n\nDAVAO OCCIDENTAL\n1378314.0\n\n\nDAVAO ORIENTAL\n3200605.0\n\n\nREGION XII\nCOTABATO (NORTH COT.)\n7659458.0\n\n\nSARANGANI\n2990485.0\n\n\nSOUTH COTABATO\n9090438.0\n\n\nSULTAN KUDARAT\n4037874.0\n\n\nREGION XIII\nAGUSAN DEL NORTE\n4670054.0\n\n\nAGUSAN DEL SUR\n4155305.0\n\n\nDINAGAT ISLANDS\n735236.0\n\n\nSURIGAO DEL NORTE\n3979284.0\n\n\nSURIGAO DEL SUR\n4116338.0\n\n\n\n\n86 rows × 1 columns\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION III',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['NCR',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION IV-A',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION VII',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\nTo match the contestant ID to the contestant name, the contest files were also downloaded from the Commission of Elections’ 2019 National and Local Elections website and stored in the local repository. Similar to the results directory, the contest directory contained json files for each contest type/position. Upon inspection of a sample file within the directory, the following values were obtained:\nThe pertinent keys from each json files were:\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\ncn\nContest code name - location\n\n\nccc\nContest code name\n\n\ntype\nContest type\n\n\nbos\nlist of candidate parameters\n\n\n\nUnder the bos key, we can extract each of the candidates’ parameters. The more useful ones for the group’s study include:\n\n\n\nParameter\nDescription\n\n\n\n\nboc\nContestant ID\n\n\nbon\nContestant Name\n\n\npn\nParty Name\n\n\n\n\n\n\n Step 2: Extract and collect the 2019 Elections (Contestant) data\nThe group also created utility functions for easier retrieval of the contestant datasets. This is to ensure each dataset is ready for aggregation.\nSimilar to the get_province_coc, the get_contestant_attrib method unpacks each key and value from the {contest_number}.json dictionary into a cleaned up dataframe. The method converts the bos directory into an additional list, which will also be appended into the resulting dataframe.\nThere are two (2) major political coalitions fighting for the senate seats: * Hugpong ng Pagbabago (HNP) * Otso Diretso\nSimilar to the get_all_province_coc, the get_contestants_attrib method is a walker that goes through each of the contest directory. The method will first append all {contest_numer}.json files into a singular dataframe. Next, the method creates a new column that identifies who among the senatorial candidates are part of the Hugpong ng Pagbabago (HNP) or Otso Diretso campaign.\n\ndef get_contestant_attrib(filepath):\n    \"\"\"\n    Returns the contestant json file into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestnat attributes\n\n    \"\"\"\n\n    contestants_values = []\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n        attrib_keys = [key for key in list(data.keys())\n                       if isinstance(key, (str, float, int))]\n        attrib_values = [value for value in list(data.values())\n                         if isinstance(value, (str, float, int))]\n        contest_values = [list(contest.values()) for contest in data['bos']]\n        df = pd.DataFrame(contest_values,\n                          columns=list(data['bos'][0].keys()))\n        for k, v in zip(attrib_keys, attrib_values):\n            df[k] = v\n    return df\n\n\ndef get_contestants_attrib(filepath):\n    \"\"\"\n    Returns ALL contestant json files into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n    df = pd.DataFrame()\n    for each_filepath in glob.glob(filepath):\n        df = df.append(get_contestant_attrib(each_filepath))\n    senators = df[df.cc == 1].copy()\n    senators['bon'] = senators['bon'].str.extract(pat='(.*?) \\(')\n    party = df[df.cc == 5567].copy()\n    df = senators.append(party)\n    df.drop_duplicates(inplace=True)\n    df.rename(columns={'boc': 'bo'}, inplace=True)\n    otso = ['AQUINO, BENIGNO BAM ', 'DIOKNO, CHEL', 'HILBAY, PILO',\n            'MACALINTAL, MACAROMY', 'GUTOC, SAMIRA', 'ALEJANO, GARY',\n            'ROXAS, MAR', 'TAÑADA,LORENZO ERIN TAPAT']\n    hnp = ['ANGARA, EDGARDO SONNY', 'BONG REVILLA, RAMON JR', 'CAYETANO, PIA',\n           'DELA ROSA, BATO', 'EJERCITO, ESTRADA JV', 'ESTRADA, JINGGOY',\n           'GO, BONG GO', 'MANGUDADATU, DONG', 'MANICAD, JIGGY',\n           'MARCOS, IMEE', 'PIMENTEL, KOKO', 'TOLENTINO, FRANCIS', \n           'VILLAR, CYNTHIA']\n    for o in otso:\n        df.loc[df.bon == o, 'coalition'] = \"Otso Diretso\"\n    for h in hnp:\n        df.loc[df.bon == h, 'coalition'] = \"HNP\"\n    df['coalition'] = df['coalition'].fillna('None')\n    return df\n\nLet us run the get_contestants_attrib. This will be used later in the blog for our further analysis.\n\ncontestant_filepaths = '/mnt/data/public/elections/nle2019/contests/*'\ndf_contestants = get_contestants_attrib(contestant_filepaths)\ndf_contestants.head()\n\nWe now have two dataframes: df_results containing the 2019 election results, and df_contestants containing the contestant information. These two dataframes can now be merged into a single dataframe. Let us also drop certain columns which we have deemed as unimportant.\n\ndef merge_comelec(results, contestants):\n    \"\"\"\n    Merge results dataframe with contestants dataframe\n\n    Parameters\n    ----------\n    results    : pd.DataFrame\n    contestants: pd.DataFrame\n\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n\n    df = pd.merge(results, contestants, on=['bo', 'cc'], how='left')\n    df = df.drop(['vbc', 'boi', 'to', 'pc', 'pcc', 'pcy', 'pcm',\n                  'pck', 'ccc', 'pre', 'ser', 'cn'], axis=1)\n    df.columns = ['position', 'candidate_id', 'votes_per_province',\n                  'total_votes', 'votes_in_pct', 'region_raw', 'province',\n                  'region', 'candidate_name', 'party_name',\n                  'contest_position', 'contest_type', 'coalition']\n    return df\n\n\nnle2019 = merge_comelec(df_results, df_contestants)\nnle2019.region.unique()\n\n\n\n Step 3: Load Geopandas for geospatial processing \nThe Philippines is composed of seventeen (17) administrative regions. We can use the geopandas module to manage and pre-process geospatial data.\nLet us first load up a geopandas graph of the Philippines.\n\nfig, ax = plt.subplots(1, figsize=(10, 15), frameon=True)\n\nph0 = gpd.GeoDataFrame.from_file(\"ph_regions.shp\")\nph0.plot(ax=ax, cmap='Greens', edgecolor='#555555', k=18)\nax.set_title('Regions of the Philippines')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nfor ind, row in ph0.iterrows():\n    ax.text(row[\"geometry\"].centroid.x, row[\"geometry\"].centroid.y,\n            row[\"region\"])"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#b.-national-senatorial-results",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#b.-national-senatorial-results",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " B. National Senatorial Results",
    "text": "B. National Senatorial Results\n\nLet us look at the senatorial candidates. Let us total up the votes by candidate and see the top 12 winners.\n\ndf_senators = nle2019[nle2019['contest_position'] == 'SENATOR']\ndf_senator = df_senators.groupby(['candidate_name']).agg(\n    {'votes_per_province': sum}).reset_index()\ndf_senator.sort_values('votes_per_province', ascending=False, inplace=True)\ndf_senator.columns = ['Candidate', 'Votes']\ndf_senator.head(12)\n\n\nfig, ax = plt.subplots(figsize=(15,8))\nplt.rcParams.update({'font.size': 14})\ndf_senator.set_index('Candidate').head(12).sort_values(\n    by='Votes', ascending=True).plot.barh(ax=ax,\n    title='Top 12 Candidates, in Millions', color='#BF5209', legend=False);\nax.set_xlabel('Total Votes');"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#c.-top-senator-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#c.-top-senator-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " C. Top Senator Per Region",
    "text": "C. Top Senator Per Region\nWe want to find out won across all the regions. If there is any bias for cetain candidates. Based on our findings, we can see that candidate Cynthia Villar won majority of the regions.\nIt is interesting to note that the top ranking senator for Ilocos Region (Region I) and the Cordillera Administrative Region (CAR) is Imee Marcos, which hails from that region. This confirms that there is a “Solid North”, and that support for the Marcoses still exists in that area.\nFor the Mindanao regions, the top candidate is Bong Go, former special assistant to President Duterte, who is from Mindanao.\nThese show that Philippine politics is very regional in nature. Voters will naturally support their hometown candidate, regardless of the issues surrounding that candidate.\n\ndf_senator_region = df_senators.groupby(\n    ['region', 'candidate_name']).agg({'votes_per_province': sum})\ndf_senator_region['rank'] = df_senator_region.groupby(\n    'region')['votes_per_province'].rank('dense', ascending=False)\ndf_senator_region = df_senator_region[df_senator_region['rank'] == 1].reset_index()\ndf_senator_region.columns = ['Region', 'Candidate Name', 'Votes', 'Rank']\ndf_senator_region\n\n\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank')\n .reset_index())\n\n\nfig, ax = plt.subplots()\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank').plot\n .barh(color='#BF5209', ax=ax));\nax.set_xlabel('Rank');"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#d.-dominant-party-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#d.-dominant-party-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " D. Dominant Party per Region",
    "text": "D. Dominant Party per Region\nThere are three main political parties vying for the senatorial seats: 1. LIBERAL PARTY 2. NACIONALISTA PARTY 3. PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN (PDP-LABAN)\nWe looked at the dominant or majority political party per administrative region, and identify if any regions have any affiliations to a certain party.\n\ndf_party = df_senators.groupby(['region_raw', 'party_name']).agg({\n    'votes_per_province': sum})\ndf_party['rank'] = df_party.groupby(\n    'region_raw')['votes_per_province'].rank('dense', ascending=False)\ndf_party.reset_index(inplace=True)\ndf_leading_party = df_party[df_party['rank'] == 1].copy()\ndf_leading_party.columns = ['Region', 'Party', 'Votes', 'Rank']\ndf_leading_party.sort_values(['Region', 'Rank'], inplace=True)\ndf_leading_party\n\nWe can clearly see a voting bias of each region.\nMajority of Region 1 and Region 2 has a voting preference towards the NACIONALISTA PARTY. This can be attributed to the fact that Imee Marcos, who hails from Ilocos Norte, is a Nacionalista.\nMajority of Region 5 and Region 6 has a voting preference towards the LIBERAL PARTY. This is also expected since Leni Robredo, incumbent Vice President who is from the Liberal Party, is a Bicolano.\nThe remainder of the Philippines has a voting preference towards the PDP-LABAN.\n\nmerged = ph0.merge(df_leading_party, left_on='region', right_on='Region')\ncolors = 18\ncolor_map = {'PARTIDO DEMOKRATIKO PILIPINO LAKAS NG BAYAN': 'red', \n             'LIBERAL PARTY': 'yellow',\n             'NACIONALISTA PARTY': 'green'}\n\nfig, ax = plt.subplots(1, 1, figsize = (10,12));\nax.set_title('Dominant political party per region', fontsize=20);\n\nfor party in list(merged['Party'].unique()):\n    color_map[party]\n    merged[merged['Party'] == party].plot(ax=ax, color = color_map[party], \n                                          categorical = True, \n                                          figsize=(10,12), legend=True)\n\nmerged.geometry.boundary.plot(color=None,edgecolor='k',linewidth = .5,ax=ax);\nplt.rcParams.update({'font.size': 18})"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#e.-dominant-coalition-per-region",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#e.-dominant-coalition-per-region",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " E. Dominant Coalition Per Region",
    "text": "E. Dominant Coalition Per Region\nAside from individual candidates and parties, we also looked at the dominant coalition per region by counting the number of senate seats obtained by each coalition. The results indicate that HNP gained a majority of the seats across all regions, especially in Mindanao.\nThe only regions where HNP did not gain a solid majority are in Bicol Region (Region V) and Eastern Visayas (Region VI), known bailwicks of the Liberal Party.\n\ndef get_coalition_seats():\n    \"\"\"\n    Returns a dataframe of the number of seats won per coalition per region\n\n    Returns\n    -------\n    coalition : pd.DataFrame\n\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'],\n        as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1))\\\n        * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats = coalition_seats.reset_index()\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition',\n        values='is_top_12', aggfunc=np.sum)\n    coalition_seats['coalition_seats_total'] = coalition_seats.sum(axis=1)\n\n    for coalition in coalition_seats.columns[:-1]:\n        coalition_seats['party_seats_pct_' + coalition] = \\\n            coalition_seats[coalition] / \\\n            coalition_seats['coalition_seats_total']\n        coalition_seats.rename(\n            columns={coalition: 'coalition_seats_count_' + coalition},\n            inplace=True)\n\n    coalition_seats = coalition_seats.round(5)\n    coalition_seats = coalition_seats.reset_index()\n    return coalition_seats\n\n\ncoalition = get_coalition_seats()\nmerged = ph0.merge(coalition[[\n                   'region', 'coalition_seats_count_HNP']], left_on='region',\n                   right_on='region')\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 15))\nmerged.plot('coalition_seats_count_HNP', ax=ax, cmap='YlOrRd', legend=True)\nax.set_title('Number of HNP senate seats won', fontsize=24)\nmerged.geometry.boundary.plot(color=None, edgecolor='k', linewidth=1, ax=ax)"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#f.-is-demographics-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#f.-is-demographics-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " F. Is Demographics Related To Voting Preference?",
    "text": "F. Is Demographics Related To Voting Preference?\nIs the voting preference of a region related to its demographics such as literacy rate and religious affiliation? To answer this, we obtained the 2015 Census Data. The directory is a collection of excel files, where each excel file corresponds to a certain region and province. If we explore each file, we can see that each sheet corresponds to a different demographic feature table. For this analysis, we are intrested at sheets T8 and T11.\nThe get_census_religion loads the imporant columns and rows from sheet T8. It also adds an additional column based on the region. Similarly, the get_census_education loads the imporant columns and rows from sheet T11. It also aggregates each individual years experience column into a singular cumulative column.\nFinally, the read_census_files aggregates the 2016 regional data into singular dataframe by using get_census_religion and get_census_education functions. To extract only the regional files, the read_census_files uses regex to get filenames with only underscores in the beginning (this is an indicator of regional data).\n\ndef get_census_religion(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by religion\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T8', header=None,\n                       usecols=[0, 1, 2, 3],\n                       skiprows=6, skip_blank_lines=True,\n                       skipfooter=3,\n                       names=['religion', 'total', 'm', 'f'])\n    df.sort_values('total', ascending=False, inplace=True)\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'religion', 'm', 'f', 'total']\n    df = df[cols]\n    return df\n\n\ndef get_census_education(path):\n    \"\"\"\n    Returns a consolidated DataFrame of census data by education\n\n    Parameters\n    ----------\n    path      : string, filepath to census directory\n\n\n    Returns\n    ----------\n    df        : pd.DataFrame\n\n    \"\"\"\n    filename = os.path.basename(path)\n    df = pd.read_excel(path, sheet_name='T11',\n                       usecols=[0, 15, 16, 17, 18, 19, 20],\n                       skiprows=3,\n                       skip_blank_lines=True, nrows=20,\n                       names=['education', '18', '19',\n                              '20_24', '25_29', '30_34', '35_above'])\n    df.dropna(how='any', inplace=True)\n    df.reset_index(inplace=True, drop=True)\n    df.drop(df.index[[0, 5, 6, 7, 9, 10, 12, 13]], inplace=True)\n    df['total'] = (df['18'] + df['19'] + df['20_24'] + df['25_29'] +\n                   df['30_34'] + df['35_above'])\n    df['region'] = re.search(r'\\_(.*?)\\_', os.path.basename(path)).group(1)\n    cols = ['region', 'education', '18', '19', '20_24', '25_29', '30_34',\n            '35_above', 'total']\n    df = df[cols]\n    return df\n\n\ndef read_census_files(path):\n    '''\n    Reads all census regional files\n\n    Parameter\n    ---------\n    path      : string, filepath to census directory\n\n    Returns\n    -------\n    Dictionary of dataframes\n    '''\n    total = {'religion': pd.DataFrame(),\n             'education': pd.DataFrame()}\n\n    for filepath in glob.glob(path + \".xls\", recursive=True):\n        if re.match('_(?!PHILIPPINES)', os.path.basename(filepath)):\n            total['religion'] = (total['religion']\n                                 .append(get_census_religion(filepath)))\n            total['education'] = (total['education']\n                                  .append(get_census_education(filepath)))\n    total['religion'].reset_index(inplace=True, drop=True)\n    total['education'].reset_index(inplace=True, drop=True)\n\n    for df in total.values():\n        df.loc[(df['region'] == \"ARMM\"), 'region'] = 'BARMM'\n        df.loc[(df['region'] == \"MIMAROPA\"), 'region'] = 'REGION IV-B'\n        df.loc[(df['region'] == \"CARAGA\"), 'region'] = 'REGION XIII'\n    return total\n\n\ncensus_path = '/mnt/data/public/census/*'\ncensus_dict = read_census_files(census_path)"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#g.-is-literacy-rate-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#g.-is-literacy-rate-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " G. Is literacy rate related to voting preference?",
    "text": "G. Is literacy rate related to voting preference?\nWe looked at the number of seats obtained by each coalition per region, then correlated it to literacy rate. Education information was obtained from the 2015 Census data.\nWe looked at the literacy rate \\(\\frac{n_{educated}}{n_{total}}\\) of each administrative region:\n\ndef get_education_percent():\n    '''\n    Gets percentage of educational level per region\n    '''\n    education = census_dict['education'].groupby(\n        ['region', 'education'], as_index=False).sum()\n    education = pd.pivot_table(\n        education, index='region', columns='education', values='total')\n    education.columns = ['education_pct_' + educ for educ in education.columns]\n    education['education_total'] = education.sum(axis=1)\n    for educ in education.columns[:-1]:\n        education[educ] /= education['education_total']\n    education.drop('education_total', axis=1, inplace=True)\n    education = education.round(5)\n\n    return education\n\n\ndef get_agg_education_percent():\n    '''\n    Gets aggregated percentage of educational level per region\n    '''\n    df_educ = get_education_percent()\n    df_educ = df_educ.reset_index()\n    df_educ['educated'] = (1 - df_educ['education_pct_No Grade Completed']\n                           - df_educ['education_pct_Not Stated'])\n    df_educ['not_educated'] = df_educ['education_pct_No Grade Completed']\n    df_educ['unknown'] = df_educ['education_pct_Not Stated']\n    df_educ.drop(columns=['education_pct_Academic Degree Holder',\n                          'education_pct_College Undergraduate',\n                          'education_pct_Elementary',\n                          'education_pct_High School',\n                          'education_pct_No Grade Completed',\n                          'education_pct_Not Stated',\n                          'education_pct_Post Baccalaureate',\n                          'education_pct_Post-Secondary',\n                          'education_pct_Pre-School',\n                          'education_pct_Special Education'], inplace=True)\n    df_educ.set_index('region', inplace=True)\n    df_educ.reset_index(inplace=True)\n    return df_educ\n\n\ndf_educ = get_agg_education_percent()\ndf_educ\n\nWe then checked if the number of seats obtained by each coalition is correlated to the literacy rate of that region. First, we obtained the number of seats obtained by each coalition per region:\n\ndef get_coalition_rank():\n    \"\"\"\n    Get number of seats obtained by each coalition\n    \"\"\"\n    coalition_seats = nle2019.query('position == 1')\n    coalition_seats = coalition_seats.groupby(\n        ['region', 'candidate_name', 'coalition'], as_index=False).agg({'votes_per_province': sum})\n    coalition_seats = coalition_seats.sort_values(\n        by=['region', 'votes_per_province'], ascending=[1, 0])\n    coalition_seats.set_index('region', inplace=True)\n\n    coalition_seats['rank'] = list(range(1, len(\n        coalition_seats.candidate_name.unique())+1)) * len(coalition_seats.index.unique())\n    coalition_seats['is_top_12'] = 1*(coalition_seats['rank'] &lt;= 12)\n    coalition_seats.reset_index(inplace=True)\n\n    coalition_seats = pd.pivot_table(\n        coalition_seats, index='region', columns='coalition', values='is_top_12', aggfunc=np.sum)\n    return coalition_seats\n\nWe then merge this with the education dataframe, then get the correlation:\n\ndf_coal_educ = get_agg_education_percent().set_index('region').join(get_coalition_rank())\ndf_coal_educ['Educated'] = df_coal_educ['educated']\ndf_coal_educ['Not Educated'] = df_coal_educ['not_educated']\ncorr = df_coal_educ.corr().loc[['Otso Diretso', 'HNP'],['Educated', 'Not Educated']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);\n\nThe Census and election data show that the voting preference of a region has no correlation with its literacy rate. We now look at religion to see if it has a correlation with the voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#h.-is-religion-related-to-voting-preference",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#h.-is-religion-related-to-voting-preference",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " H. Is religion related to voting preference?",
    "text": "H. Is religion related to voting preference?\nWe also looked into the religious affiliation per region, and checked if it is correlatd with voting preference.\nFirst, we obtained the distribution of religions per region from the Census data:\n\ndef get_religion_percent():\n    \"\"\"\n    Get percentages of religion per region\n    \"\"\"\n    religion = census_dict['religion'].groupby(\n        ['region', 'religion'], as_index=False).sum()\n    religion = pd.pivot_table(\n        religion, index='region', columns='religion', values='total')\n    religion.columns = ['religion_pct_' + rel for rel in religion.columns]\n    religion['religion_total'] = religion.sum(axis=1)\n    for rel in religion.columns[:-1]:\n        religion[rel] /= religion['religion_total']\n    religion.drop('religion_total', axis=1, inplace=True)\n    religion = religion.round(5)\n    return religion\n\n\ndf_rel = get_religion_percent()\n\nWe then merged the religion census data with the coalition ranking data to check if religion has correlation with the number of seats obtained by each coalition:\n\ndf_coal_rel = get_religion_percent().join(get_coalition_rank())\ndf_coal_rel.head()\n\nFrom getting the correlation of the religion data with the number of seats per coalition, it is apparent that the Voting preference of a region has no correlation with its religious affiliation.\n\ndf_coal_rel['Roman Catholic'] = df_coal_rel['religion_pct_Roman Catholic, including Catholic Charismatic']\ndf_coal_rel['Islam'] = df_coal_rel['religion_pct_Islam']\ndf_coal_rel['Iglesia ni Cristo'] = df_coal_rel['religion_pct_Iglesia ni Cristo']\ncorr = df_coal_rel.corr().loc[\n    ['Roman Catholic','Islam','Iglesia ni Cristo'],['HNP','Otso Diretso']]\ncolormap = sns.diverging_palette(100, 100, n = 10)\nsns.heatmap(corr, cmap=colormap, annot=True, vmin = -1, vmax = 1);"
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#i.-conclusion",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#i.-conclusion",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": " I. Conclusion",
    "text": "I. Conclusion\nUpon checking both the Comelec 2019 Election Results and the 2015 Philippine Census data, we found out that voting preference is characterized by high regionality. Candidates have a homecourt advantage, and voters tend to vote candidates or parties affiliated with their home region.\nAlso, literacy rate and religious affiliation is not correlated to voting preference."
  },
  {
    "objectID": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#acknowledgements",
    "href": "posts/20230414_Philippine_Voting_Preferences/index_files/DMW_Lab01_20190529_2.html#acknowledgements",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe would like to thank Prof Christian Alis and the ACCeSS Laboratory for the access to the high-performance computing facility."
  },
  {
    "objectID": "posts/2023-04-14-Elections/index.html",
    "href": "posts/2023-04-14-Elections/index.html",
    "title": "Regional Voting Preferences in the 2019 Philippine Senatorial Elections",
    "section": "",
    "text": "Overview\n\nOriginal submission was last 2019-05-29.\nThis jupyter notebook was created for our Data Mining and Wrangling class in AIM MSDS. In particular, this was done during our 2nd semester of class, as one of the core requirements. In this report, we sought to understand the results of the 2019 elections through descriptive statistics. We wanted to do exploratory data analysis on the following questions:\n\nAcknowledgements\n\nThis analysis was done together with my Lab partner, Geogre Esleta.\n\n\nHow did the various administrative regions of the Philippines voted for their senators?\n\nIs the voter preference homogeneous across the country, or is there a preferred candidate or party per region? More specifically, how does (1) religious affiliation, (2) educational attainment, and (2) sex play a major role on how the voters select their candidates.\n\n\nLoad Requirement Package\n\nBefore anything else, let us first load all important modules for this exercise.\n\n\nCode\nimport os\nimport io\nimport re\nimport time\nimport glob\nimport requests\nimport urllib.request\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport seaborn as sns\n\n\nIt is important to identify the datasets we are going to use for this exercise. The two identified datasets the group intends to use are: the 2019 National Data and the 2015-2016 Census data.\nWith regards to 2019 National data, the team used a web scapper provided Prof. Alis. The web scapper downloaded the election results from the Commission of Elections’ 2019 National and Local Elections website. The results were then stored in a local repository which is then easily accesible for the team. The 2019 elections results are broken down into two main directories: results and contest. In this exercise, the team will explore both directories to map out a comprehensive summary of the 2019 senatorial and party elections.\nSecondly, the 2015-2016 Census data has already been stored in a local repository for easier access. One of the main reasons why the team decided to use the 2015-2016 Census data is because of the lack of availability of recent data. The Philippine Statistics Authority only releases a comprehensive census survey ever six years. However for the purpose of this exercise, the team has agreed that the 2015-2016 census data can act as an appproximate for today’s population.\n\nMethodology\n\n\nStep 1: Extract and collect the 2019 Elections (Results) data\n\nThe first directory to explore is the 2019 Election results. The results directory contains all electoral results from a regional level down to the barangay level. For each level, a specific coc.json file is stored. This file contains all electoral results data and metadata for both national and local elections. However for the purposes of this analysis, we will only look at the aggregated elections data at the regional level. The files that we are interested are the coc.json files associated to each province, as these files contain the metadata and data on the election results.\nThe main structure of each coc.json file contains the following main keys: vbc, rs, sts, obs, and cos. For the purpose of this exercise, the important key the group needs to extract is the rs key as this provides the each candidate’s total votes per area. Under the rs key, the following keys can be found: cc, bo, v, tot, per, and ser. Cross referencing these keys with official statements and comelec documentations suggests that important keys are as follows: cc pertaining to contest_type, bo pertaining to the candidate_id, and v pertaining to votes_per_province.\n\n\n\nParemeter\nDescription\n\n\n\n\ncc\nContestant Code\n\n\nbo\nContestant ID\n\n\nv\nTotal Votes Per Contestant\n\n\ntot\nTotal Votes Per Province\n\n\n\nHowever, it must be pointed out that the available data only goes as high as provincial data. If we want to process the provincial level, the team will have to aggregate the data up.\nThe group created utility functions for easier retrieval of the provincial elections datasets. The purpose for the utility functions (and future utility functions) are for initial cleaning and manipulations. This is to ensure each dataset is ready for aggregation.\nThe get_province_coc method unpacks each key and value from the coc.json dictionary into a cleaned up dataframe. In addition, the method identifies which region and province the file originated from by examining the filepath that was passed.\nThe get_all_province_coc method is a walker that goes through each of the results directory. The walker checks if the filename has an equal value to coc.json. If a coc.jsonwas located, the get_province_coc method is applied with the filepath as the parameter. The resulting dataframe is then appended to a master dataframe for further extraction and analysis. For this exercise, the group only had to extract data up to the regional and provincial levels so only three wildcard were use for the glob walker.\nSpecial methods (get_ncr_coc and get_all_ncr_coc) were established to get the cities’ coc.json. For the case of the NCR cities, theire associated coc.json files were one directory lower.\n\nget_province_coc function\n\n\n\nCode\ndef get_province_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-2]\n        province = dirpath.split('/')[-1]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\n\nget_all_province_coc function\n\n\n\nCode\ndef get_all_province_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Created a new column to deal with the reclassification of\n        \"NEGROS ORIENTAL\" and \"NEGROS OCCIDENTAL\" to \"NIR\" \n            to match the PSA 2016 dataset.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if os.path.basename(file) == 'coc.json':\n            df = get_province_coc(file)\n            total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    total.loc[(total['province'] == \"NEGROS ORIENTAL\") |\n              (total['province'] == \"NEGROS OCCIDENTAL\"), 'region'] = 'NIR'\n    return total\n\n\n\nget_ncr_coc function\n\n\n\nCode\ndef get_ncr_coc(filepath):\n    \"\"\"\n    Loads a single coc file. \n\n    Adds additional columns `region` and `province to the DataFrame,\n    depending on filepath.\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe    \n\n    \"\"\"\n    output = []\n    with open(filepath, 'r') as f:\n        dirpath, filepath = os.path.split(filepath)\n        region = dirpath.split('/')[-3]\n        province = dirpath.split('/')[-2]\n        data = json.load(f)\n        for each in data['rs']:\n            row = [float(element) for element in list(each.values())]\n            output.append([data['vbc']] + row + [region] + [province])\n    df = pd.DataFrame(output,\n                      columns=['vbc', 'cc', 'bo', 'v', 'tot', 'per', 'ser',\n                               'region', 'province'])\n    return df\n\n\n\nget_all_ncr_coc function\n\n\n\nCode\ndef get_all_ncr_coc(tree):\n    \"\"\"\n    Loads all province COC files and saves them to a dataframe\n\n    Checks the filepath if filename is 'coc.json'\n\n    Parameters\n    ----------\n    filepath    : filepath\n\n    Return\n    ------\n    df          : a dataframe\n    \"\"\"\n    total = pd.DataFrame()\n    for file in glob.glob(tree):\n        if file.split('/')[7] == 'NCR':\n            if os.path.basename(file) == 'coc.json':\n                df = get_ncr_coc(file)\n                total = total.append(df)\n    total.rename(columns={'region': 'region_raw'}, inplace=True)\n    total['region'] = total['region_raw'].copy()\n    return total\n\n\n\nWith these utility functions inplace, the team can now apply these methods for easier access to the 2019 elections data.\nWe can now compile all of the election results with the following line:\n\n\nCode\ntree = '/mnt/data/public/elections/nle2019/results/*/*/*'\nncr_tree = '/mnt/data/public/elections/nle2019/results/*/*/*/*'\ndf_results = get_all_province_coc(tree)\ndf_results = df_results.append(get_all_ncr_coc(ncr_tree))\ndf_results.drop_duplicates(inplace=True)\n\n\nLet’s see what we have:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvbc\ncc\nbo\nv\ntot\nper\nser\nregion_raw\nprovince\nregion\n\n\n\n\n0\n89550\n1.0\n1.0\n2004.0\n1708769.0\n0.11\n2800.0\nREGION I\nILOCOS NORTE\n\n\n1\n89550\n1.0\n2.0\n1607.0\n1708769.0\n0.09\n2800.0\nREGION I\nILOCOS NORTE\n\n\n2\n89550\n1.0\n3.0\n8772.0\n1708769.0\n0.51\n2800.0\nREGION I\nILOCOS NORTE\n\n\n3\n89550\n1.0\n4.0\n1767.0\n1708769.0\n0.10\n2800.0\nREGION I\nILOCOS NORTE\n\n\n4\n89550\n1.0\n5.0\n5068.0\n1708769.0\n0.29\n2800.0\nREGION I\nILOCOS NORTE\n\n\n\n\n\nNext, let us examine the obtained dataset with actual election results.\nBy cross checking the results with Comelec data, we can identify the senators and party names.\nJust to check our data, we can look at an example senator from the dataset. By choosing cc=1 and bo=46, we are actually highlighting Imee Marcos’ senatorial candidacy results.\n\n\nCode\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_marcos = df_results.query('cc == 1 & bo == 46').copy()\ndf_marcos.groupby('region').sum()['v'].sort_values(\n    ascending=True).plot.barh(figsize=(10, 10),\n                              title='Contestant: 46 - Imee Marcos',\n                              color='#BF5209', ax=ax);\n\n\n\nAdditionally, let us check some descriptive statistics for the 2019 Elections dataset. More specifically, let us examine the v or votes column. The group will be highly dependent on the votes data so let us first do some initial statistics and visualizations.\n\n\nCode\ndf_regions = df_results.groupby(['region', 'province'])['v'].sum().to_frame()\ndf_regions = df_regions.rename(columns={'v': 'votes'})\ndf_regions.head()\n\n\n\n\n\nregion\nprovince\nvotes\n\n\n\n\nBARMM\nBASILAN\n2093067.0\n\n\n\nLANAO DEL SUR\n4770462.0\n\n\n\nMAGUINDANAO\n5917983.0\n\n\n\nSULU\n3529555.0\n\n\n\nTAWI-TAWI\n1874486.0\n\n\nCAR\nABRA\n1923481.0\n\n\n\nAPAYAO\n703002.0\n\n\n\nBENGUET\n2426397.0\n\n\n\nIFUGAO\n1408688.0\n\n\n\nKALINGA\n1621414.0\n\n\n\nMOUNTAIN PROVINCE\n1074249.0\n\n\nNCR\nNATIONAL CAPITAL REGION - FOURTH DISTRICT\n22896771.0\n\n\n\nNATIONAL CAPITAL REGION - MANILA\n13461229.0\n\n\n\nNATIONAL CAPITAL REGION - SECOND DISTRICT\n29803007.0\n\n\n\nNATIONAL CAPITAL REGION - THIRD DISTRICT\n18481014.0\n\n\n\nTAGUIG - PATEROS\n10018306.0\n\n\n\nJust to explore, the code and image below shows the total votes in region 3. Notice that Bulacan has the highest number of votes, followed by Nueva Ecija, then Pampanga.\n\n\nCode\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION III',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nVotes Distribution in Region III\n\n\nHere we explore the vote distribution in the National Capital Region. The classification of district and cities were broken down by area (Manila, Taguig-Pateros, Second District, Third District, and Fourth District).The top number of votes came from the second district (mainly because of Quezon City), followed by the Fourth District, then the Third District.\n\n\nCode\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['NCQ',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nVotes Distribution in the National Capital Region\n\n\nNext, we explore the distribution of votes in Region 4-A. Unsurprisingly, the population of votes is high in the population centers of Cavite, then Batangas, then Laguna.\n\n\nCode\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION IV-A',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nVotes Distribution in the Region IV-A\n\n\nFor now, let us also examine the distribution of election votes in region 7. Unsurprisingly, the votes are concentrated first in Cebu, followed by Bohol and Siquijor.\n\n\nCode\nfig, ax = plt.subplots()\nax.set_xlabel('Votes')\ndf_test.loc['REGION VII',\"votes\"].plot.barh(color='#BF5209', ax=ax);\n\n\n\n\n\nVotes Distribution in the Region VII\n\n\nTo match the contestant ID to the contestant name, the contest files were also downloaded from the Commission of Elections’ 2019 National and Local Elections website and stored in the local repository. Similar to the results directory, the contest directory contained json files for each contest type/position. Upon inspection of a sample file within the directory, the following values were obtained:\nThe pertinent keys from each json files were:\n\n\n\nParameter\nDescription\n\n\n\n\ncc\nContest code\n\n\ncn\nContest code name - location\n\n\nccc\nContest code name\n\n\ntype\nContest type\n\n\nbos\nlist of candidate parameters\n\n\n\nUnder the bos key, we can extract each of the candidates’ parameters. The more useful ones for the group’s study include:\n\n\n\nParameter\nDescription\n\n\n\n\nboc\nContestant ID\n\n\nbon\nContestant Name\n\n\npn\nParty Name\n\n\n\n\nStep 2: Extract and collect the 2019 Elections (Contestant) data\n\nThe group also created utility functions for easier retrieval of the contestant datasets. This is to ensure each dataset is ready for aggregation.\nSimilar to the get_province_coc, the get_contestant_attrib method unpacks each key and value from the {contest_number}.json dictionary into a cleaned up dataframe. The method converts the bos directory into an additional list, which will also be appended into the resulting dataframe.\nThere are two (2) major political coalitions fighting for the senate seats:\n\nHugpong ng Pagbabago (HNP)\nOtso Diretso\n\nSimilar to the get_all_province_coc, the get_contestants_attrib method is a walker that goes through each of the contest directory. The method will first append all {contest_numer}.json files into a singular dataframe. Next, the method creates a new column that identifies who among the senatorial candidates are part of the Hugpong ng Pagbabago (HNP) or Otso Diretso campaign.\n\n\nCode\ndef get_contestant_attrib(filepath):\n    \"\"\"\n    Returns the contestant json file into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestnat attributes\n\n    \"\"\"\n\n    contestants_values = []\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n        attrib_keys = [key for key in list(data.keys())\n                       if isinstance(key, (str, float, int))]\n        attrib_values = [value for value in list(data.values())\n                         if isinstance(value, (str, float, int))]\n        contest_values = [list(contest.values()) for contest in data['bos']]\n        df = pd.DataFrame(contest_values,\n                          columns=list(data['bos'][0].keys()))\n        for k, v in zip(attrib_keys, attrib_values):\n            df[k] = v\n    return df\n\n\ndef get_contestants_attrib(filepath):\n    \"\"\"\n    Returns ALL contestant json files into a dataframe\n\n    Parameters\n    ----------\n    filepath   : string\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n    df = pd.DataFrame()\n    for each_filepath in glob.glob(filepath):\n        df = df.append(get_contestant_attrib(each_filepath))\n    senators = df[df.cc == 1].copy()\n    senators['bon'] = senators['bon'].str.extract(pat='(.*?) \\(')\n    party = df[df.cc == 5567].copy()\n    df = senators.append(party)\n    df.drop_duplicates(inplace=True)\n    df.rename(columns={'boc': 'bo'}, inplace=True)\n    otso = ['AQUINO, BENIGNO BAM ', 'DIOKNO, CHEL', 'HILBAY, PILO',\n            'MACALINTAL, MACAROMY', 'GUTOC, SAMIRA', 'ALEJANO, GARY',\n            'ROXAS, MAR', 'TAÑADA,LORENZO ERIN TAPAT']\n    hnp = ['ANGARA, EDGARDO SONNY', 'BONG REVILLA, RAMON JR', 'CAYETANO, PIA',\n           'DELA ROSA, BATO', 'EJERCITO, ESTRADA JV', 'ESTRADA, JINGGOY',\n           'GO, BONG GO', 'MANGUDADATU, DONG', 'MANICAD, JIGGY',\n           'MARCOS, IMEE', 'PIMENTEL, KOKO', 'TOLENTINO, FRANCIS', \n           'VILLAR, CYNTHIA']\n    for o in otso:\n        df.loc[df.bon == o, 'coalition'] = \"Otso Diretso\"\n    for h in hnp:\n        df.loc[df.bon == h, 'coalition'] = \"HNP\"\n    df['coalition'] = df['coalition'].fillna('None')\n    return df\n\n\nLet us run the get_contestants_attrib. This will be used later in the blog for our further analysis.\n\n\nCode\ncontestant_filepaths = '/mnt/data/public/elections/nle2019/contests/*'\ndf_contestants = get_contestants_attrib(contestant_filepaths)\ndf_contestants.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbo\nbon\nboi\nto\npc\npn\npcc\npcy\npcm\npck\ncc\ncn\nccc\nccn\npre\ntype\ncoalition\n\n\n\n\n37\nHILBAY, PILO\n52.png\n37\n2\nAKSYON DEMOKRATIKO\n1\n1\n1\n1\n1\nSENATOR PHILIPPINES\n1\nSENATOR\n3\nnational\nOtso Diretso\n\n\n7\nALUNAN, RAFFY\n53.png\n7\n3\nBAGUMBAYAN VOLUNTEERS FOR A NEW PHILIPPINES\n1\n1\n1\n1\n1\nSENATOR PHILIPPINES\n1\nSENATOR\n3\nnational\nNone\n\n\n14\nBALDEVARONA, BALDE\n35.png\n14\n7\nFILIPINO FAMILY PARTY\n1\n1\n1\n1\n1\nSENATOR PHILIPPINES\n1\nSENATOR\n3\nnational\nNone\n\n\n18\nCASIÑO, TOTI\n20.png\n18\n8\nKATIPUNAN NG DEMOKRATIKONG PILIPINO(KDP)\n1\n1\n1\n1\n1\nSENATOR PHILIPPINES\n1\nSENATOR\n3\nnational\nNone\n\n\n21\nCHONG, GLENN\n61.png\n21\n8\nKATIPUNAN NG DEMOKRATIKONG PILIPINO(KDP)\n1\n1\n1\n1\n1\nSENATOR PHILIPPINES\n1\nSENATOR\n3\nnational\nNone\n\n\n\n\nWe now have two dataframes: df_results containing the 2019 election results, and df_contestants containing the contestant information. These two dataframes can now be merged into a single dataframe. Let us also drop certain columns which we have deemed as unimportant.\n\n\nCode\ndef merge_comelec(results, contestants):\n    \"\"\"\n    Merge results dataframe with contestants dataframe\n\n    Parameters\n    ----------\n    results    : pd.DataFrame\n    contestants: pd.DataFrame\n\n\n    Returns\n    ----------\n    df         : pd.DataFrame of contestant attributes\n\n    \"\"\"\n\n    df = pd.merge(results, contestants, on=['bo', 'cc'], how='left')\n    df = df.drop(['vbc', 'boi', 'to', 'pc', 'pcc', 'pcy', 'pcm',\n                  'pck', 'ccc', 'pre', 'ser', 'cn'], axis=1)\n    df.columns = ['position', 'candidate_id', 'votes_per_province',\n                  'total_votes', 'votes_in_pct', 'region_raw', 'province',\n                  'region', 'candidate_name', 'party_name',\n                  'contest_position', 'contest_type', 'coalition']\n    return df\n\n\nLet’s merge the tables, then just check the unique regions using the unique method.\n\n\nCode\nnle2019 = merge_comelec(df_results, df_contestants)\nnle2019.region.unique()\n\narray(['REGION I', 'REGION IV-B', 'BARMM', 'REGION II', 'REGION III',\n       'REGION V', 'REGION VI', 'NIR', 'REGION VII', 'REGION VIII',\n       'REGION IX', 'REGION X', 'REGION XI', 'REGION XII', 'REGION XIII',\n       'REGION IV-A', 'CAR', 'NCR'], dtype=object)\n\n\n\nStep 3: Load Geopandas for geospatial processing\n\n\nLoading the geospatial data\n\nThe Philippines is composed of seventeen (17) administrative regions. We can use the geopandas module to manage and pre-process geospatial data.\nLet us first load up a geopandas graph of the Philippines.\n\n\nCode\nfig, ax = plt.subplots(1, figsize=(10, 15), frameon=True)\n\nph0 = gpd.GeoDataFrame.from_file(\"ph_regions.shp\")\nph0.plot(ax=ax, cmap='Greens', edgecolor='#555555', k=18)\nax.set_title('Regions of the Philippines')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nfor ind, row in ph0.iterrows():\n    ax.text(row[\"geometry\"].centroid.x, row[\"geometry\"].centroid.y,\n            row[\"region\"])\n\n\n\n\n\nMap of the Philippines\n\n\n\nLooking at Senatorial Results\n\nLet us look at the senatorial candidates. Let us total up the votes by candidate and see the top 12 winners.\n\n\n\nIndex\nCandidate\nVotes\n\n\n\n\n61\nVILLAR, CYNTHIA\n23653546.0\n\n\n54\nPOE, GRACE\n20877585.0\n\n\n33\nGO, BONG GO\n18979132.0\n\n\n18\nCAYETANO, PIA\n18287782.0\n\n\n23\nDELA ROSA, BATO\n17396249.0\n\n\n7\nANGARA, EDGARDO SONNY\n16826634.0\n\n\n39\nLAPID, LITO\n16181906.0\n\n\n45\nMARCOS, IMEE\n14735294.0\n\n\n59\nTOLENTINO, FRANCIS\n14264142.0\n\n\n15\nBONG REVILLA, RAMON JR\n13899831.0\n\n\n14\nBINAY, NANCY\n13864931.0\n\n\n53\nPIMENTEL, KOKO\n13529531.0\n\n\n\nLet’s visualize this with a plot:\n\n\nCode\nfig, ax = plt.subplots(figsize=(15,8))\nplt.rcParams.update({'font.size': 14})\ndf_senator.set_index('Candidate').head(12).sort_values(\n    by='Votes', ascending=True).plot.barh(ax=ax,\n    title='Top 12 Candidates, in Millions', color='#BF5209', legend=False);\nax.set_xlabel('Total Votes');im\n\n\n\n\n\nTop 12 Senators by vote\n\n\n\nTop Senator Per Region\n\nWe want to find out won across all the regions. If there is any bias for cetain candidates. Based on our findings, we can see that candidate Cynthia Villar won majority of the regions.\nIt is interesting to note that the top ranking senator for Ilocos Region (Region I) and the Cordillera Administrative Region (CAR) is Imee Marcos, which hails from that region. This confirms that there is a “Solid North”, and that support for the Marcoses still exists in that area.\nFor the Mindanao regions, the top candidate is Bong Go, former special assistant to President Duterte, who is from Mindanao.\nThese show that Philippine politics is very regional in nature. Voters will naturally support their hometown candidate, regardless of the issues surrounding that candidate.\n\n\nCode\ndf_senator_region = df_senators.groupby(\n    ['region', 'candidate_name']).agg({'votes_per_province': sum})\ndf_senator_region['rank'] = df_senator_region.groupby(\n    'region')['votes_per_province'].rank('dense', ascending=False)\ndf_senator_region = df_senator_region[df_senator_region['rank'] == 1].reset_index()\ndf_senator_region.columns = ['Region', 'Candidate Name', 'Votes', 'Rank']\ndf_senator_region\n\n\nTop Candiate Per Region\n\n\n\n\nRegion\nCandidate Name\nVotes\nRank\n\n\n\n\n0\nBARMM\nGO, BONG GO\n768037\n1\n\n\n1\nCAR\nMARCOS, IMEE\n348303\n1\n\n\n2\nNCR\nVILLAR, CYNTHIA\n3345089\n1\n\n\n3\nNIR\nVILLAR, CYNTHIA\n856992\n1\n\n\n4\nREGION I\nMARCOS, IMEE\n1661318\n1\n\n\n5\nREGION II\nVILLAR, CYNTHIA\n915393\n1\n\n\n6\nREGION III\nVILLAR, CYNTHIA\n3056167\n1\n\n\n7\nREGION IV-A\nVILLAR, CYNTHIA\n3660112\n1\n\n\n8\nREGION IV-B\nVILLAR, CYNTHIA\n688494\n1\n\n\n9\nREGION IX\nGO, BONG GO\n663927\n1\n\n\n10\nREGION V\nPOE, GRACE\n1417114\n1\n\n\n11\nREGION VI\nVILLAR, CYNTHIA\n1064681\n1\n\n\n12\nREGION VII\nVILLAR, CYNTHIA\n1307605\n1\n\n\n13\nREGION VIII\nVILLAR, CYNTHIA\n1132757\n1\n\n\n14\nREGION X\nGO, BONG GO\n949392\n1\n\n\n15\nREGION XI\nGO, BONG GO\n1002771\n1\n\n\n16\nREGION XII\nVILLAR, CYNTHIA\n983354\n1\n\n\n17\nREGION XIII\nGO, BONG GO\n777931\n1\n\n\n\n\n\nCode\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank')\n .reset_index())\n\n\n\n\nCode\n fig, ax = plt.subplots()\n(df_senator_region[df_senator_region['Rank'] == 1].reset_index().groupby(\n    'Candidate Name')['Rank'].sum().to_frame().sort_values(by='Rank').plot\n .barh(color='#BF5209', ax=ax));\nax.set_xlabel('Rank');\n\n\n\nAcknowledgements:\nImages: https://primer.com.ph/blog/2016/02/04/philippine-elections-the-culture-the-drama-the-battle-2/"
  }
]